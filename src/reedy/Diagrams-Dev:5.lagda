\begin{code}

{-# OPTIONS --without-K --rewriting #-}

open import reedy.SimpleSemicategories
open import cwfs.CwFs
open import cwfs.Pi
open import cwfs.Universe

module reedy.Diagrams-Dev:5 {‚Ñì‚Çò·¥µ ‚Ñì‚Çí ‚Ñì‚Çò}
  (I : SimpleSemicategory ‚Ñì‚Çò·¥µ)
  (I-strictly-oriented : is-strictly-oriented I)
  {C : WildCategory ‚Ñì‚Çí ‚Ñì‚Çò}
  (cwfstr : CwFStructure C)
  (pistr : PiStructure cwfstr)
  (univstr : UniverseStructure cwfstr)
  where

open SimpleSemicategory I

import reedy.CosieveShapes as Sh
open Sh I
open import reedy.ShapeOrder I
open import reedy.ShapeCountFactors I
open ShapeCountFactors-StrictlyOriented I-strictly-oriented

open CwFStructure cwfstr renaming (_‚ó¶_ to _‚ó¶À¢·µò·µá_ ; ass to assÀ¢·µò·µá)
open PiStructure pistr
open UniverseStructure univstr
open import cwfs.Telescopes cwfstr
open Œ†‚Çú‚Çë‚Çó pistr
open TelIndexedTypes univstr

\end{code}

\begin{code}

ùîª : ‚Ñï ‚Üí Con
M·µí : ‚àÄ i h t s (ac : <‚Çõ-Accc i h t s) ‚Üí Tel (ùîª h)

module Convenience where
  M : ‚àÄ i h t s ‚Üí <‚Çõ-Accc i h t s ‚Üí Con
  M i h t s ac = close (M·µí i h t s ac)

  M·µítot[1+_] : (h : ‚Ñï) ‚Üí <‚Çõ-Acc (total-shape-1+ h) ‚Üí Tel (ùîª h)
  M·µítot[1+ h ] = M·µí (1+ h) h (hom-size (1+ h) h) (total-is-shape-1+ h)

  M·µífull : (i h : ‚Ñï) ‚Üí <‚Çõ-Acc (full-shape i h) ‚Üí Tel (ùîª h)
  M·µífull i h = M·µí i h full shp
    where
    full = hom-size i h
    shp = full-is-shape i h

  -- ùî∏ : (i : ‚Ñï) ‚Üí Ty (ùîª i)
  -- ùî∏ i = Œ†‚Çú‚Çë‚Çó (M·µí·µó·µí·µó i) U

  -- A : (i : ‚Ñï) ‚Üí Ty (ùîª i ‚à∑ ùî∏ i ++‚Çú‚Çë‚Çó M·µí·µó·µí·µó i [ œÄ (ùî∏ i) ]‚Çú‚Çë‚Çó)
  -- A i = generic[ M·µí·µó·µí·µó i ]type

open Convenience

ùîª O = ‚óÜ
ùîª (1+ h) = ùîª h ‚à∑ {!Œ†‚Çú‚Çë‚Çó (M·µí (1+ h) h tot ts <‚Çõ-is-wf) U!}
  where
  tot = hom-size (1+ h) h
  ts = total-is-shape-1+ h

M‚Éó : ‚àÄ i h t s (ac : <‚Çõ-Accc i h t s)
     ‚Üí {j : ‚Ñï} (f : hom i j)
     ‚Üí let r = count-factors i h t s f in
       (rs : is-shape j h r)
     ‚Üí (¬∑-ac : <‚Çõ-Accc j h r rs)
     ‚Üí Sub (M i h t s ac) (M j h r rs ¬∑-ac)

M·µí i O O s ac = ‚Ä¢
M·µí i (1+ h) O s ac = {!M·µí i h (hom-size i h) (full-is-shape i h) ? [ œÄ ]!}
M·µí i O (1+ t) s (acc _ rec) = {!!}
M·µí i (1+ h) (1+ t) s (acc _ rec) =
  let prev-acc = rec _ (on-ùë° ltS)
      ¬∑-acc = rec _ (on-ùëñ (hom-inverse _ _ [t]))
  in
  M·µí i (1+ h) t prev prev-acc
    ‚Ä£ A‚Çï [ idd {!!} ‚ó¶À¢·µò·µá M‚Éó i (1+ h) t prev prev-acc [t] rs ¬∑-acc ]
  where
    prev = prev-is-shape s

    u = <-from-is-shape s
    [t] = #[ t ] i (1+ h) u

    tot = hom-size (1+ h) h
    ts = total-is-shape-1+ h

    tot-acc : <‚Çõ-Acc (total-shape-1+ h)
    tot-acc = rec (shape (1+ h) h tot ts) (on-ùëñ (hom-inverse _ _ [t]))

    A‚Çï = generic[ _ Õæ M·µí (1+ h) h tot ts tot-acc ]type

    rs = count-factors-is-shape i (1+ h) t prev [t]


M‚Éó i h t s ac f rs ¬∑-acc = {!!}

\end{code}
