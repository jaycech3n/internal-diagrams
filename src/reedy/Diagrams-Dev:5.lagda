\begin{code}

{-# OPTIONS --without-K --rewriting #-}

open import reedy.SimpleSemicategories
open import cwfs.CwFs
open import cwfs.Pi
open import cwfs.Universe

module reedy.Diagrams-Dev:5 {‚Ñì‚Çò·¥µ ‚Ñì‚Çí ‚Ñì‚Çò}
  (I : SimpleSemicategory ‚Ñì‚Çò·¥µ)
  (I-strictly-oriented : is-strictly-oriented I)
  {C : WildCategory ‚Ñì‚Çí ‚Ñì‚Çò}
  (cwfstr : CwFStructure C)
  (pistr : PiStructure cwfstr)
  (univstr : UniverseStructure cwfstr)
  where

open SimpleSemicategory I

import reedy.CosieveShapes as Sh
open Sh I
open import reedy.ShapeOrder I
open import reedy.ShapeCountFactors I
open ShapeCountFactors-StrictlyOriented I-strictly-oriented

open CwFStructure cwfstr renaming (_‚ó¶_ to _‚ó¶À¢·µò·µá_ ; ass to assÀ¢·µò·µá)
open PiStructure pistr
open UniverseStructure univstr
open import cwfs.Telescopes cwfstr
open Œ†‚Çú‚Çë‚Çó pistr
open TelIndexedTypes univstr

\end{code}

\begin{code}

ùîª : ‚Ñï ‚Üí Con

\end{code}

\begin{code}

M·µí : ‚àÄ i h t s (ac : <‚Çõ-Accc i h t s) ‚Üí Tel (ùîª h)

module Convenience where
  M : ‚àÄ i h t s ‚Üí <‚Çõ-Accc i h t s ‚Üí Con
  M i h t s ac = close (M·µí i h t s ac)

  -- Total matching context
  -- Abstract over accessibility witness?
  -- M·µí·µó·µí·µó[1+_] : ‚àÄ i ‚Üí <‚Çõ-Acc (total-shape-1+ i) ‚Üí Tel (ùîª i)
  -- M·µí·µó·µí·µó[1+ i ] = M·µí (1+ i) i (hom-size (1+ i) i) (total-is-shape-1+ i)
  M·µí·µó·µí·µó[1+_] : ‚àÄ i ‚Üí Tel (ùîª i)
  M·µí·µó·µí·µó[1+ i ] = M·µí (1+ i) i (hom-size (1+ i) i) (total-is-shape-1+ i) <‚Çõ-is-wf

  ùî∏[1+_] : ‚àÄ i ‚Üí Ty (ùîª i)
  ùî∏[1+ i ] = Œ†‚Çú‚Çë‚Çó M·µí·µó·µí·µó[1+ i ] U

  A[1+_] : ‚àÄ i ‚Üí Ty (ùîª i ‚à∑ ùî∏[1+ i ] ++‚Çú‚Çë‚Çó M·µí·µó·µí·µó[1+ i ] [ œÄ (ùî∏[1+ i ]) ]‚Çú‚Çë‚Çó)
  A[1+ i ] = generic-( M·µí·µó·µí·µó[1+ i ] )-indexed-type

  A‚ÇÄ : Ty (‚óÜ ‚à∑ U)
  A‚ÇÄ = generic-closed-type-in ‚óÜ

open Convenience

\end{code}

\begin{code}

ùîª O = ‚óÜ ‚à∑ U
ùîª (1+ i) = ùîª i ‚à∑ ùî∏[1+ i ]

\end{code}

\begin{code}

M‚Éó :
  ‚àÄ i h t s (ac : <‚Çõ-Accc i h t s)
  ‚Üí {j : ‚Ñï} (f : hom i j)
  ‚Üí let r = count-factors i h t s f in
    (rs : is-shape j h r)
  ‚Üí (¬∑-ac : <‚Çõ-Accc j h r rs)
  ‚Üí Sub (M i h t s ac) (M j h r rs ¬∑-ac)

-- M‚Éó‚ó¶ : ?

\end{code}

\begin{code}

M·µí i O O s ac = ‚Ä¢
M·µí i (1+ h) O s ac = wk‚Çú‚Çë‚Çó $ M·µí i h (hom-size i h) (full-is-shape i h) <‚Çõ-is-wf

M·µí i O (1+ t) s (acc _ rec) =
  let
    pac = rec _ (on-ùë° ltS)
    prev-M·µí = M·µí i O t ps pac
  in
    prev-M·µí ‚Ä£ A‚ÇÄ [ œÄ‚Çú‚Çë‚Çó prev-M·µí ]
  where
    ps = prev-is-shape s

M·µí i (1+ h) (1+ t) s (acc _ rec) =
  let
    pac = rec _ (on-ùë° ltS)
    ¬∑-ac = rec _ (on-ùëñ (hom-inverse _ _ [t]))
  in
    M·µí i (1+ h) t ps pac
      ‚Ä£ A[1+ h ] [ idd {!!} ‚ó¶À¢·µò·µá M‚Éó i (1+ h) t ps pac [t] rs ¬∑-ac ]
  where
    ps = prev-is-shape s
    u = <-from-is-shape s
    [t] = #[ t ] i (1+ h) u
    rs = count-factors-is-shape i (1+ h) t ps [t]

\end{code}


Morphism action of matching object:

The recursive definition of M‚Éó in the (i, h, t+1) case requires its type to
compute to the appropriate value depending on whether or not f divides [t]‚Å±‚Çï. To
actually allow this computation to occur, the type needs to expose an argument
of type (Dec (f ‚à£ #[ t ] i h u)).

\begin{code}

M‚Éó[_,_,1+_]-deptype :
  ‚àÄ i h t (s : is-shape i h (1+ t)) (ac : <‚Çõ-Accc i h (1+ t) s)
  ‚Üí {j : ‚Ñï} (f : hom i j)
  ‚Üí let u = <-from-is-shape s in
    (d : Dec (f ‚à£ #[ t ] i h u))
  ‚Üí let r = count-factors-aux i h t u f d in
    (rs : is-shape j h r) (¬∑-ac : <‚Çõ-Accc j h r rs)
  ‚Üí Type _
M‚Éó[ i , h ,1+ t ]-deptype s ac {j} f d rs ¬∑-ac =
  Sub (M i h (1+ t) s ac)
      (M j h (count-factors-aux i h t (<-from-is-shape s) f d) rs ¬∑-ac)

\end{code}

We also expose the discriminant in an auxiliary implementation of M‚Éó (i, h, t+1);
this will be needed when defining M‚Éó‚ó¶.

\begin{code}

M‚Éó[_,_,1+_] :
  ‚àÄ i h t s ac {j} (f : hom i j)
  ‚Üí let u = <-from-is-shape s in
    (d : Dec (f ‚à£ #[ t ] i h u))
  ‚Üí let r = count-factors-aux i h t u f d in
    (rs : is-shape j h r) (¬∑-ac : <‚Çõ-Accc j h r rs)
  ‚Üí M‚Éó[ i , h ,1+ t ]-deptype s ac f d rs ¬∑-ac

M‚Éó[ i , O ,1+ t ] s (acc _ rec) f (inl yes) rs (acc _ ¬∑-rec) =
  let
    pac = rec _ (on-ùë° ltS)
    p¬∑-rec = ¬∑-rec _ (on-ùë° ltS)
  in
    M‚Éó i O t ps pac f prs p¬∑-rec  ‚ó¶À¢·µò·µá œÄ _ ,, (œÖ _ ‚óÇ$ coe·µÄ·µê {!!})
  where
    ps = prev-is-shape s
    prs = prev-is-shape rs
M‚Éó[ i , O ,1+ t ] s (acc _ rec) f (inr no) rs (acc _ ¬∑-rec) = {!!}
M‚Éó[ i , 1+ h ,1+ t ] s ac f (inl yes) rs ¬∑-ac = {!!}
M‚Éó[ i , 1+ h ,1+ t ] s ac f (inr no) rs ¬∑-ac = {!!}

\end{code}

\begin{code}

M‚Éó i O t s ac f rs ¬∑-ac = {!!}
M‚Éó i (1+ h) t s ac f rs ¬∑-ac = {!!}

\end{code}
