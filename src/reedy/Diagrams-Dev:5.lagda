\begin{code}

{-# OPTIONS --without-K --rewriting --termination-depth=10 -vterm.type:60 #-}

open import reedy.SimpleSemicategories
open import cwfs.CwFs
open import cwfs.Pi
open import cwfs.Universe

module reedy.Diagrams-Dev:5 {‚Ñì‚Çò·¥µ ‚Ñì‚Çí ‚Ñì‚Çò}
  (I : SimpleSemicategory ‚Ñì‚Çò·¥µ)
  (I-strictly-oriented : is-strictly-oriented I)
  {C : WildCategory ‚Ñì‚Çí ‚Ñì‚Çò}
  (cwfstr : CwFStructure C)
  (pistr : PiStructure cwfstr)
  (univstr : UniverseStructure cwfstr)
  where

open SimpleSemicategory I

import reedy.CosieveShapes as Sh
open Sh I
open import reedy.ShapeOrder I
open import reedy.ShapeCountFactors I
open ShapeCountFactors-StrictlyOriented I-strictly-oriented

open CwFStructure cwfstr renaming (_‚ó¶_ to _‚ó¶À¢·µò·µá_ ; ass to assÀ¢·µò·µá)
open PiStructure pistr
open UniverseStructure univstr
open import cwfs.Telescopes cwfstr
open Œ†‚Çú‚Çë‚Çó pistr
open TelIndexedTypes univstr

\end{code}

\begin{code}

ùîª : ‚Ñï ‚Üí Con

\end{code}

\begin{code}

M·µí : ‚àÄ i h t s (ac : <‚Çõ-Accc i h t s) ‚Üí Tel (ùîª h)

module Abbreviations where
  -- None of these should be defined by pattern matching.

  M : ‚àÄ i h t s ‚Üí <‚Çõ-Accc i h t s ‚Üí Con
  M i h t s ac = close (M·µí i h t s ac)

  -- Total matching context
  -- Abstract over accessibility witness?
  -- M·µí·µó·µí·µó[1+_] : ‚àÄ i ‚Üí <‚Çõ-Acc (total-shape-1+ i) ‚Üí Tel (ùîª i)
  -- M·µí·µó·µí·µó[1+ i ] = M·µí (1+ i) i (hom-size (1+ i) i) (total-is-shape-1+ i)
  M·µí·µó·µí·µó[1+_] : ‚àÄ i ‚Üí Tel (ùîª i)
  M·µí·µó·µí·µó[1+ i ] = M·µí (1+ i) i (hom-size (1+ i) i) (total-is-shape-1+ i) <‚Çõ-is-wf

  ùî∏[1+_] : ‚àÄ i ‚Üí Ty (ùîª i)
  ùî∏[1+ i ] = Œ†‚Çú‚Çë‚Çó M·µí·µó·µí·µó[1+ i ] U

  A[1+_] : ‚àÄ i ‚Üí Ty (ùîª i ‚à∑ ùî∏[1+ i ] ++‚Çú‚Çë‚Çó M·µí·µó·µí·µó[1+ i ] [ œÄ (ùî∏[1+ i ]) ]‚Çú‚Çë‚Çó)
  A[1+ i ] = generic-( M·µí·µó·µí·µó[1+ i ] )-indexed-type

  A‚ÇÄ : Ty (‚óÜ ‚à∑ U)
  A‚ÇÄ = generic-closed-type-in ‚óÜ

  M-ùë°= :
    ‚àÄ i h t t' {s s'} {ac ac'}
    ‚Üí (p : t == t')
    ‚Üí close (M·µí i h t s ac) == close (M·µí i h t' s' ac')
  M-ùë°= i h t t' p =
    ap‚Üì2 {A = Shape} {B = <‚Çõ-Acc}
      (Œª (shape i h t s) ac ‚Üí close (M·µí i h t s ac))
      (ap‚Üì2 (shape i h) p (shape=‚Üì i h _))
      (<‚Çõ-Acc=‚Üì _)

open Abbreviations

\end{code}

\begin{code}

ùîª O = ‚óÜ ‚à∑ U
ùîª (1+ i) = ùîª i ‚à∑ ùî∏[1+ i ]

\end{code}

Morphism action of the matching object.

\begin{code}

M‚Éó :
  ‚àÄ i h t s (ac : <‚Çõ-Accc i h t s)
  ‚Üí {j : ‚Ñï} (f : hom i j)
  ‚Üí let r = count-factors i h t s f in
    (rs : is-shape j h r)
  ‚Üí (rac : <‚Çõ-Accc j h r rs)
  ‚Üí Sub (close $ M·µí i h t s ac) (close $ M·µí j h r rs rac)

\end{code}

\begin{code}

M·µí i O O s ac = ‚Ä¢
M·µí i (1+ h) O s ac = wk‚Çú‚Çë‚Çó $ M·µí i h (hom-size i h) (full-is-shape i h) <‚Çõ-is-wf

M·µí i O (1+ t) s (acc _ rec) =
  let
    ps = prev-is-shape s
    pac = rec _ (on-ùë° ltS)
    pM·µí = M·µí i O t ps pac
  in
    pM·µí ‚Ä£ A‚ÇÄ [ œÄ‚Çú‚Çë‚Çó pM·µí ]
  -- where
  --   ps = prev-is-shape s

M·µí i (1+ h) (1+ t) s (acc _ rec) =
  let
    pac = rec _ (on-ùë° ltS)
    rac = rec _ (on-ùëñ (hom-inverse _ _ [t]))
  in
    M·µí i (1+ h) t ps pac
      ‚Ä£ A[1+ h ] [ idd {!!} ‚ó¶À¢·µò·µá M‚Éó i (1+ h) t ps pac [t] rs rac ]
  where
    ps = prev-is-shape s
    u = <-from-is-shape s
    [t] = #[ t ] i (1+ h) u
    rs = count-factors-is-shape i (1+ h) t ps [t]

\end{code}

Morphism action of matching object:

The recursive definition of M‚Éó in the (i, h, t+1) case requires its type to
compute to the appropriate value depending on whether or not f divides [t]‚Å±‚Çï. To
actually allow this computation to occur, the type needs to expose an argument
of type (Dec (f ‚à£ #[ t ] i h u)).

\begin{code}

M‚Éó[_,_,1+_]-deptype :
  ‚àÄ i h t (s : is-shape i h (1+ t)) (ac : <‚Çõ-Accc i h (1+ t) s)
  ‚Üí {j : ‚Ñï} (f : hom i j)
  ‚Üí let u = <-from-is-shape s in
    (d : Dec (f ‚à£ #[ t ] i h u))
  ‚Üí let r = count-factors-aux i h t u f d in
    (rs : is-shape j h r) (rac : <‚Çõ-Accc j h r rs)
  ‚Üí Type _
M‚Éó[ i , h ,1+ t ]-deptype s ac {j} f d rs rac =
  Sub (close $ M·µí i h (1+ t) s ac)
      (close $ M·µí j h (count-factors-aux i h t (<-from-is-shape s) f d) rs rac)

\end{code}

We also expose the discriminant in an auxiliary implementation of M‚Éó (i, h, t+1);
this will be needed when defining M‚Éó‚ó¶.

\begin{code}

M‚Éó[_,_,1+_] :
  ‚àÄ i h t s ac {j} (f : hom i j)
  ‚Üí let u = <-from-is-shape s in
    (d : Dec (f ‚à£ #[ t ] i h u))
  ‚Üí let r = count-factors-aux i h t u f d in
    (rs : is-shape j h r) (rac : <‚Çõ-Accc j h r rs)
  ‚Üí M‚Éó[ i , h ,1+ t ]-deptype s ac f d rs rac

\end{code}

We need a few equalities to hold. These must be proved simultaneously with the
main components. Chief among them is functoriality of the matching object.

\begin{code}

M‚Éó‚ó¶ :
  ‚àÄ i h t s ac
  ‚Üí {j : ‚Ñï} (f : hom i j) {k : ‚Ñï} (g : hom j k)
  ‚Üí let rf = count-factors i h t s f in
    (rfs : is-shape j h rf) (rfac : <‚Çõ-Accc j h rf rfs)
  ‚Üí let rg = count-factors j h rf rfs g in
    (rgs : is-shape k h rg) (rgac : <‚Çõ-Accc k h rg rgs)
  ‚Üí let rgf = count-factors i h t s (g ‚ó¶ f) in
    (rgfs : is-shape k h rgf) (rgfac : <‚Çõ-Accc k h rgf rgfs)
  ‚Üí idd (M-ùë°= k h _ _ (count-factors-comp i h t s f g rfs))
      ‚ó¶À¢·µò·µá M‚Éó i h t s ac (g ‚ó¶ f) rgfs rgfac
    == M‚Éó j h rf rfs rfac g rgs rgac ‚ó¶À¢·µò·µá M‚Éó i h t s ac f rfs rfac

\end{code}

Also need the following commutation lemmas:

     M (i, 0, t) -----> M (j, 0, count-factors (i, 0, t) f)
              ‚ï≤           ‚ï±
               ‚ï≤  comm‚ÇÄ  ‚ï±
                ‚ï≤       ‚ï±
                 v     v  œÄ‚Çú‚Çë‚Çó
                   ùîª 0

\begin{code}

comm‚ÇÄ :
  ‚àÄ i t (s : is-shape i O t) (ac : <‚Çõ-Accc i O t s)
  ‚Üí {j : ‚Ñï} (f : hom i j)
  ‚Üí let rf = count-factors i O t s f in
    (rfs : is-shape j O rf) (rfac : <‚Çõ-Accc j O rf rfs)
  ‚Üí œÄ‚Çú‚Çë‚Çó (M·µí j O rf rfs rfac) ‚ó¶À¢·µò·µá M‚Éó i O t s ac f rfs rfac
    == œÄ‚Çú‚Çë‚Çó (M·µí i O t s ac)

\end{code}

\begin{code}

M‚Éó[ i , O ,1+ t ] s (acc _ rec) {j} f d@(inl yes) rs (acc _ rrec) =
  let
    ps = prev-is-shape s
    prs = prev-is-shape rs

    prf = count-factors i O t ps f

    pac = rec _ (on-ùë° ltS)
    pM·µí = M·µí i O t ps pac

    prac = rrec _ (on-ùë° ltS)
    prM·µí = M·µí j O prf prs prac

    {- For termination checking reasons pac and prac can't be in a where block,
       so neither can any terms depending on them. But the type of p below is

       p : A‚ÇÄ [ œÄ‚Çú‚Çë‚Çó pM·µí ] [ œÄ (A‚ÇÄ [ œÄ‚Çú‚Çë‚Çó pM·µí ]) ]
           ==
           A‚ÇÄ [ œÄ‚Çú‚Çë‚Çó prM·µí ] [ M‚Éó i O t ps pac f prs prac ‚ó¶À¢·µò·µá œÄ (A‚ÇÄ [ œÄ‚Çú‚Çë‚Çó pM·µí ]) ]
    -}
    p = ap _[ œÄ (A‚ÇÄ [ œÄ‚Çú‚Çë‚Çó pM·µí ])] (([= ! (comm‚ÇÄ i t ps pac f prs prac) ]) ‚àô ([‚ó¶] {A = A‚ÇÄ})) ‚àô ![‚ó¶]
  in
    M‚Éó i O t ps pac f prs prac  ‚ó¶À¢·µò·µá œÄ _ ,, (œÖ _ ‚óÇ$ coe·µÄ·µê p)
  where
    -- ps = prev-is-shape s
    -- prs = prev-is-shape rs

    -- prf = count-factors i O t ps f

M‚Éó[ i , O ,1+ t ] s (acc _ rec) f (inr no) rs (acc _ rrec) = {!!}
M‚Éó[ i , 1+ h ,1+ t ] s ac f (inl yes) rs rac = {!!}
M‚Éó[ i , 1+ h ,1+ t ] s ac f (inr no) rs rac = {!!}

\end{code}

\begin{code}

M‚Éó i O O s ac f rs rac = id
M‚Éó i O (1+ t) s ac f rs rac =
  M‚Éó[ i , O ,1+ t ] s ac f (discrim i O t u f) rs rac
  where u = <-from-is-shape s
M‚Éó i (1+ h) O s ac f rs rac = {!!}
M‚Éó i (1+ h) (1+ t) s ac f rs rac = {!!}

\end{code}

Proof of equations:

\begin{code}

comm‚ÇÄ-aux :
  ‚àÄ i t (s : is-shape i O (1+ t))
  ‚Üí let u = <-from-is-shape s in
    (ac : <‚Çõ-Accc i O (1+ t) s)
  ‚Üí {j : ‚Ñï} (f : hom i j)
  ‚Üí (d : Dec (f ‚à£ #[ t ] i O u))
  ‚Üí let rf = count-factors-aux i O t u f d in
    (rfs : is-shape j O rf) (rfac : <‚Çõ-Accc j O rf rfs)
  ‚Üí œÄ‚Çú‚Çë‚Çó (M·µí j O rf rfs rfac) ‚ó¶À¢·µò·µá M‚Éó[ i , O ,1+ t ] s ac f d rfs rfac
    == œÄ‚Çú‚Çë‚Çó (M·µí i O (1+ t) s ac)

comm‚ÇÄ-aux i t s (acc _ rec) f (inl yes) rfs (acc _ rrec) = assÀ¢·µò·µá ‚àô {!!} -- _ =‚ü® {!!} ‚ü© _ =‚àé
comm‚ÇÄ-aux i t s (acc _ rec) f (inr no) rfs (acc _ rrec) = {!!}

comm‚ÇÄ i O s (acc _ rec) f rfs (acc _ rrec) = idr (œÄ‚Çú‚Çë‚Çó ‚Ä¢)
comm‚ÇÄ i (1+ t) s (acc _ rec) f rfs (acc _ rrec) =
  comm‚ÇÄ-aux i t s (acc (shape i O (1+ t) s) rec) f (discrim i O t (<-from-is-shape s) f) rfs (acc _ rrec)

\end{code}

\begin{code}

M‚Éó‚ó¶ = {!!}

\end{code}
