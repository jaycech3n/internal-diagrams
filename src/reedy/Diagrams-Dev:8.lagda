\begin{code}

{-# OPTIONS --without-K --rewriting #-}

open import reedy.SimpleSemicategories
open import cwfs.CwFs
open import cwfs.Pi
open import cwfs.Universe

module reedy.Diagrams-Dev:8 {‚Ñì‚Çò·¥µ ‚Ñì‚Çí ‚Ñì‚Çò}
  (I : SimpleSemicategory ‚Ñì‚Çò·¥µ)
  (I-strictly-oriented : is-strictly-oriented I)
  {C : WildCategory ‚Ñì‚Çí ‚Ñì‚Çò}
  (cwfstr : CwFStructure C)
  (pistr : PiStructure cwfstr)
  (univstr : UniverseStructure cwfstr)
  where

open SimpleSemicategory I

import reedy.CosieveShapes as Sh
import reedy.ShapeOrder as Ord
open Sh I
open Ord I

open import reedy.ShapeCountFactors I
open ShapeCountFactors-StrictlyOriented I-strictly-oriented

open CwFStructure cwfstr renaming (_‚ó¶_ to _‚ó¶À¢·µò·µá_ ; ass to assÀ¢·µò·µá)
open PiStructure pistr
open UniverseStructure univstr
open import cwfs.Telescopes cwfstr
open Œ†‚Çú‚Çë‚Çó pistr
open TelIndexedTypes univstr

\end{code}

\begin{code}

record DiagramData (b : ‚Ñï) : Type (‚Ñì‚Çí ‚à™ ‚Ñì‚Çò ‚à™ ‚Ñì‚Çò·¥µ) where
  field ùîª : Con

  MatchingFunctor : (sh‚ÇÄ : Shape) (bd‚ÇÄ : ‚Ñé sh‚ÇÄ < b) ‚Üí Type (‚Ñì‚Çí ‚à™ ‚Ñì‚Çò ‚à™ ‚Ñì‚Çò·¥µ)
  MatchingFunctor sh‚ÇÄ bd‚ÇÄ =
    Œ£[ M·µí Ôπï
      ((sh : Shape) (bd : ‚Ñé sh < b) (w : sh ‚â§‚Çõ sh‚ÇÄ) ‚Üí Tel ùîª) ]
    Œ£[ M‚Éó Ôπï
      ((sh@(shape i h t s) : Shape) (bd : ‚Ñé sh < b) (w : sh ‚â§‚Çõ sh‚ÇÄ)
      {j : ‚Ñï} (f : hom i j)
      ‚Üí let rf = count-factors i h t s f
            rfs = count-factors-is-shape i h t s f
            rfw = ‚â§‚Çõ-trans (rstr-‚â§‚Çõ-decr sh f rfs) w
        in
        Sub (close $ M·µí sh bd w) (close $ M·µí (shape j h rf rfs) bd rfw)) ]
    ( (sh@(shape i h t s) : Shape) (bd : ‚Ñé sh < b) (w : sh ‚â§‚Çõ sh‚ÇÄ)
      {j : ‚Ñï} (f : hom i j)
      {k : ‚Ñï} (g : hom j k)
      ‚Üí let rf = count-factors i h t s f
            rfs = count-factors-is-shape i h t s f
            rfw = ‚â§‚Çõ-trans (rstr-‚â§‚Çõ-decr sh f rfs) w
        in
        M‚Éó (shape j h rf rfs) bd rfw g ‚ó¶À¢·µò·µá M‚Éó sh bd w f
        == idd {!ap2 (Œª rf w' ‚Üí M·µí (shape k (‚Ñé sh) rf rfs) bd w' ) ?!} ‚ó¶À¢·µò·µá M‚Éó sh bd w (g ‚ó¶ f) )

  field M : (sh‚ÇÄ : Shape) (bd‚ÇÄ : ‚Ñé sh‚ÇÄ < b) ‚Üí MatchingFunctor sh‚ÇÄ bd‚ÇÄ

open DiagramData

diag-data : (b : ‚Ñï) ‚Üí DiagramData b

diag-data O = record { ùîª = ‚óÜ ; M = Œª{ _ () } }

diag-data (1+ O) = record
  { ùîª = ‚óÜ ‚à∑ U
  ; M = Œª
    { (Sh.shape i‚ÇÄ O O s‚ÇÄ) bd‚ÇÄ ‚Üí {!!}
    ; (Sh.shape i‚ÇÄ (1+ h‚ÇÄ) O s‚ÇÄ) bd‚ÇÄ ‚Üí {!!}
    ; (Sh.shape i‚ÇÄ h‚ÇÄ (1+ t‚ÇÅ) s‚ÇÄ) bd‚ÇÄ ‚Üí {!!}
    }
  }
  where
  --

diag-data (2+ b) = record { ùîª = {!!} ; M = {!!} }

\end{code}
