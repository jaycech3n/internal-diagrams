\begin{code}

{-# OPTIONS --without-K --rewriting #-}

open import reedy.SimpleSemicategories
open import cwfs.CwFs
open import cwfs.Pi
open import cwfs.Universe

module reedy.Diagrams-Dev:1 {‚Ñì‚Çò·¥µ ‚Ñì‚Çí ‚Ñì‚Çò}
  (I : SimpleSemicategory ‚Ñì‚Çò·¥µ)
  (I-strictly-oriented : is-strictly-oriented I)
  {C : WildCategory ‚Ñì‚Çí ‚Ñì‚Çò}
  (cwfstr : CwFStructure C)
  (pistr : PiStructure cwfstr)
  (univstr : UniverseStructure cwfstr)
  where

open SimpleSemicategory I

open import reedy.CosieveShapes I
open import reedy.ShapeOrder I
open import reedy.ShapeCountFactors I
open ShapeCountFactors-StrictlyOriented I-strictly-oriented

open CwFStructure cwfstr renaming (_‚ó¶_ to _‚ó¶À¢·µò·µá_ ; ass to assÀ¢·µò·µá)
open PiStructure pistr
open UniverseStructure univstr
open import cwfs.Telescopes cwfstr
open Œ†‚Çú‚Çë‚Çó pistr
open TelIndexedTypes univstr

\end{code}

\begin{code}

record DiagramDataType (bsh : Shape) : Type (‚Ñì‚Çí ‚à™ ‚Ñì‚Çò ‚à™ ‚Ñì‚Çò·¥µ) where
  field
    ùîª : Con
    M·µí : (sh : Shape) ‚Üí sh ‚â§‚Çõ bsh ‚Üí Tel ùîª
    M‚Éó :
      (sh@(shape i h t s) : Shape)
      (w : sh ‚â§‚Çõ bsh)
      {j : ‚Ñï} (f : hom i j)
      ‚Üí let cf = count-factors i h t s f in
        (cfs : is-shape j h cf)
      ‚Üí Sub (close $ M·µí sh w)
            (close $ M·µí (shape j h cf cfs) (‚â§‚Çõ-trans (restr-‚â§‚Çõ-decr sh f cfs) w))

DiagramData : (sh : Shape) ‚Üí DiagramDataType sh
DiagramData sh = ?

\end{code}
