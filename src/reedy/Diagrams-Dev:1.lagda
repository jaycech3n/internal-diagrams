\begin{code}

{-# OPTIONS --without-K --rewriting #-}

open import reedy.SimpleSemicategories
open import cwfs.CwFs
open import cwfs.Pi
open import cwfs.Universe

module reedy.Diagrams-Dev:1 {‚Ñì‚Çò·¥µ ‚Ñì‚Çí ‚Ñì‚Çò}
  (I : SimpleSemicategory ‚Ñì‚Çò·¥µ)
  (I-strictly-oriented : is-strictly-oriented I)
  {C : WildCategory ‚Ñì‚Çí ‚Ñì‚Çò}
  (cwfstr : CwFStructure C)
  (pistr : PiStructure cwfstr)
  (univstr : UniverseStructure cwfstr)
  where

open SimpleSemicategory I

open import reedy.CosieveShapes I
open import reedy.ShapeOrder:1 I
open import reedy.ShapeCountFactors:1 I
open ShapeCountFactors-StrictlyOriented I-strictly-oriented

open CwFStructure cwfstr renaming (_‚ó¶_ to _‚ó¶À¢·µò·µá_ ; ass to assÀ¢·µò·µá)
open PiStructure pistr
open UniverseStructure univstr
open import cwfs.Telescopes cwfstr
open Œ†‚Çú‚Çë‚Çó pistr
open TelIndexedTypes univstr

\end{code}

\begin{code}

-- This definition is wrong.
record DiagramDataType (b : ‚Ñï) (sh : Shape) (u : ‚Ñé sh ‚â§ b) : Type (‚Ñì‚Çí ‚à™ ‚Ñì‚Çò ‚à™ ‚Ñì‚Çò·¥µ) where
  field
    ùîª : Con -- Contains filler types up to what level?
            -- ‚Ä¢ bh, where bsh = (bi, bh, bt)? Can't be, because could have e.g.
            -- bsh = (10,0,0) and sh = (9,8,full), and we'd need M·µí (9,8,full)
            -- in context ùîª with the 8-filler.
            -- ‚Ä¢ bi -1? But we'd have to define M·µí (i,h,t) in general, where we
            -- could have bi -1 < h for shapes. Then we'd need to do something like
            -- discriminate on whether bi -1 < h or bi -1 ‚â• h.
    M·µí : (sh : Shape) ‚Üí sh ‚â§‚Çõ bsh ‚Üí Tel ùîª -- wrong.
    M‚Éó :
      (sh@(shape i h t s) : Shape)
      (w : sh ‚â§‚Çõ bsh)
      {j : ‚Ñï} (f : hom i j)
      ‚Üí let cf = count-factors i h t s f in
        (cfs : is-shape j h cf)
      ‚Üí Sub (close $ M·µí sh w)
            (close $ M·µí (shape j h cf cfs) (‚â§‚Çõ-trans (restr-‚â§‚Çõ-decr sh f cfs) w))

open DiagramDataType

DiagramDataRec : (bsh : Shape) ‚Üí Type (‚Ñì‚Çí ‚à™ ‚Ñì‚Çò ‚à™ ‚Ñì‚Çò·¥µ)
DiagramDataRec bsh = (sh : Shape) ‚Üí sh <‚Çõ bsh ‚Üí DiagramDataType sh

rstr :
  ‚àÄ {bsh} ‚Üí DiagramDataRec bsh
  ‚Üí (sh : Shape) ‚Üí sh <‚Çõ bsh ‚Üí DiagramDataRec sh
rstr ind sh w = Œª sh' w' ‚Üí ind sh' (<‚Çõ-trans w' w)

diagram-data-aux :
  ‚àÄ bi bh bt bs
  ‚Üí DiagramDataRec (shape bi bh bt bs)
  ‚Üí DiagramDataType (shape bi bh bt bs)
diagram-data-aux bi bh (1+ bt) bs ind = {!!}
diagram-data-aux bi (1+ bh) O bs ind = record
  { ùîª = prev-ùîª ‚à∑ Œ†‚Çú‚Çë‚Çó {!M·µí!} U
  ; M·µí = {!!}
  ; M‚Éó = Œª sh w f cfs ‚Üí {!!} }
  where
  diagram[i,h,full] =
    diagram-data-aux bi bh (hom-size bi bh) (full-shape bi bh) (rstr ind _ (on-‚Ñé ltS))
  prev-ùîª = ùîª diagram[i,h,full]
  -- M·µí[1+h] = \M·µí

diagram-data-aux bi O O bs ind = record
  { ùîª = ‚óÜ ‚à∑ U
  ; M·µí = Œª{ .(shape bi O O bs) (inl idp) ‚Üí ‚Ä¢ ; sh (inr (on-ùëñ w)) ‚Üí {!!} }
  ; M‚Éó = Œª sh w f cfs ‚Üí {!!} }


diagram-data : (bsh : Shape) ‚Üí DiagramDataType bsh
diagram-data =
  shape-ind
    DiagramDataType
    Œª{(shape bi bh bt bs) ‚Üí diagram-data-aux bi bh bt bs}

\end{code}
