{-# OPTIONS --without-K --rewriting #-}

open import reedy.SimpleSemicategories

module reedy.Cosieves {‚Ñì‚Çò} (I : SimpleSemicategory ‚Ñì‚Çò) where

open SimpleSemicategory I


{- Shapes of linear cosieves -}

shape : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï ‚Üí Type‚ÇÄ
shape i h t = t ‚â§ hom-size i h

prev-shape : ‚àÄ {i h t} ‚Üí shape i h (1+ t) ‚Üí shape i h t
prev-shape = S‚â§-‚â§

full-shape : ‚àÄ i h ‚Üí shape i h (hom-size i h)
full-shape i h = lteE

total-shape-1+ : ‚àÄ i ‚Üí shape (1+ i) i (hom-size (1+ i) i)
total-shape-1+ i = full-shape (1+ i) i

<-shape : ‚àÄ {i h t} ‚Üí t < hom-size i h ‚Üí shape i h t
<-shape = inr

Shape = Œ£[ i Ôπï ‚Ñï ] Œ£[ h Ôπï ‚Ñï ] Œ£[ t Ôπï ‚Ñï ] shape i h t

ùëñ : Shape ‚Üí ‚Ñï
ùëñ = fst

‚Ñé : Shape ‚Üí ‚Ñï
‚Ñé = fst ‚àò snd

ùë° : Shape ‚Üí ‚Ñï
ùë° = 2nd ‚àò snd

is-shape : ((i , h , t , _) : Shape) ‚Üí shape i h t
is-shape = 3rd ‚àò snd


{- Shape equality -}

shape-is-prop : ‚àÄ {i h t} ‚Üí is-prop (shape i h t)
shape-is-prop = ‚â§-is-prop

shape-path : ‚àÄ {i h t} (s s' : shape i h t) ‚Üí s == s'
shape-path = prop-has-all-paths


{- Counting factors -}

count-factors :
  ‚àÄ i h t ‚Üí shape i h t ‚Üí ‚àÄ {j} ‚Üí hom i j ‚Üí ‚Ñï
count-factors[_,_,1+_] :
  ‚àÄ i h t (u : t < hom-size i h) {j} (f : hom i j)
  ‚Üí Dec (f ‚à£ (#[ t ] i h u))
  ‚Üí ‚Ñï

count-factors-discrim :
  ‚àÄ {i h} t s {j} (f : hom i j) ‚Üí Dec (f ‚à£ #[ t ] i h (S‚â§-< s))
count-factors-discrim {i} {h} t s f = f ‚à£? #[ t ] i h (S‚â§-< s)

count-factors i h O s f = O
count-factors i h (1+ t) s f =
  count-factors[ i , h ,1+ t ] (S‚â§-< s) f (count-factors-discrim t s f)

count-factors[ i , h ,1+ t ] u f (inr no) =
  count-factors i h t (<-shape u) f
count-factors[ i , h ,1+ t ] u f (inl yes) =
  1+ (count-factors i h t (<-shape u) f)

module 6‚àô22 where -- paper version as of 16.01.24
  count-factors-top-level :
    ‚àÄ i h t (s : shape i h t) (f : hom i h)
    ‚Üí count-factors i h t s f == O
  count-factors-top-level i h O s f = idp
  count-factors-top-level i h (1+ t) s f with count-factors-discrim t s f
  ... | inl (g , _) = ‚ä•-rec (endo-hom-empty g)
  ... | inr no = count-factors-top-level i h t (prev-shape s) f

open 6‚àô22 public


module count-factors-basic-properties (i h j : ‚Ñï) (f : hom i j) where
  module 6‚àô25 where -- Proof here differs from the paper
    count-factors-all-O-hom-size-O :
      (‚àÄ t s ‚Üí count-factors i h t s f == O)
      ‚Üí hom-size j h == O
    count-factors-all-O-hom-size-O cf-all-O =
      ¬¨O<-=O (hom-size j h) assuming<O.get-‚ä•
      where
      module assuming<O (w : O < hom-size j h) where
        [0] = #[ O ] j h w
        idx‚ÇÄ = idx-of ([0] ‚ó¶ f)
        t‚ÇÄ = fst idx‚ÇÄ
        u  = snd idx‚ÇÄ
        s‚ÇÄ = <-S‚â§ u

        f‚à£[t‚ÇÄ] : f ‚à£ #[ t‚ÇÄ ] i h u
        f‚à£[t‚ÇÄ] rewrite hom#-idx ([0] ‚ó¶ f) = [0] , idp

        f‚à£[t‚ÇÄ]' = f‚à£[t‚ÇÄ]
          ‚óÇ$ transp (Œª u ‚Üí f ‚à£ #[ t‚ÇÄ ] i h u) (<-has-all-paths _ _)

        lem : count-factors i h (1+ t‚ÇÄ) s‚ÇÄ f ‚â† O
        lem with count-factors-discrim t‚ÇÄ s‚ÇÄ f
        ... | inl yes = ‚Ñï-S‚â†O _
        ... | inr no = ‚ä•-rec $ no f‚à£[t‚ÇÄ]'

        get-‚ä• : ‚ä•
        get-‚ä• = lem $ cf-all-O (1+ t‚ÇÄ) s‚ÇÄ

    hom-size-O-no-divisible :
      hom-size j h == O
      ‚Üí ‚àÄ t u ‚Üí ¬¨ (f ‚à£ #[ t ] i h u)
    hom-size-O-no-divisible p t u (g , _) =
      ‚âÆO _ $ transp (O <_) p $ hom[ j , h ]-inhab g

    no-divisible-count-factors-all-O :
      (‚àÄ t u ‚Üí ¬¨ (f ‚à£ #[ t ] i h u))
      ‚Üí ‚àÄ t s ‚Üí count-factors i h t s f == O
    no-divisible-count-factors-all-O no-div O s = idp
    no-divisible-count-factors-all-O no-div (1+ t) s
     with count-factors-discrim t s f
    ... | inl yes = ‚ä•-rec $ no-div _ _ yes
    ... | inr no = no-divisible-count-factors-all-O no-div t (prev-shape s)

    -- Lots of annoying finagling to the right form in this...could probably do
    -- all this more concisely.
    hom-size>O-exists-divisible :
      O < hom-size j h
      ‚Üí Œ£ (Fin (hom-size i h)) Œª (t , u) ‚Üí f ‚à£ #[ t ] i h u
    hom-size>O-exists-divisible O<hom =
      ¬¨‚àÄFin¬¨ _ _ (Œª (t , u) ‚Üí f ‚à£? #[ t ] i h u) $
        ¬¨uncurry $ contra $ ‚â†-inv $ <-to-‚â† O<hom
      where
      no-divisible-hom-size-O =
        count-factors-all-O-hom-size-O ‚àò no-divisible-count-factors-all-O
      contra = contrapos no-divisible-hom-size-O

  open 6‚àô25 public

  module count-factors-smallest-divisible
    (t‚ÇÄ : ‚Ñï)
    (u‚ÇÄ : t‚ÇÄ < hom-size i h)
    (divisible : f ‚à£ #[ t‚ÇÄ ] i h u‚ÇÄ)
    (smallest : ‚àÄ t u
                ‚Üí f ‚à£ #[ t ] i h u
                ‚Üí t‚ÇÄ ‚â§ t)
    where
    module 6‚àô24 where
      count-factors-O-below-first-divisible :
        ‚àÄ t {s} ‚Üí t ‚â§ t‚ÇÄ ‚Üí count-factors i h t s f == O
      count-factors-O-below-first-divisible O w = idp
      count-factors-O-below-first-divisible (1+ t) {s} w
       with count-factors-discrim t s f
      ... | inl yes = ‚ä•-rec $ S‚â∞ (‚â§-trans w v)
                      where v = smallest _ _ yes :> (t‚ÇÄ ‚â§ t)
      ... | inr no = count-factors-O-below-first-divisible t (S‚â§-‚â§ w)


module Cosieves-IsStrictlyOriented
  (I-strictly-oriented : is-strictly-oriented I)
  where
  open SimpleSemicategories-IsStrictlyOriented I I-strictly-oriented

  module divby {i h j : ‚Ñï} (f : hom i j) (size-cond : O < hom-size j h) where
    nonempty-ih : O < hom-size i h
    nonempty-ih = hom[ i , h ]-inhab (#[ O ] j h size-cond ‚ó¶ f)

    -- exists-smallest-divisible :
    --   Œ£ (Fin (hom-size i h)) Œª (t , u) ‚Üí smallest-divisible i h j f t u
    -- exists-smallest-divisible = w‚ÇÅ , fst w‚ÇÇ , curry (snd w‚ÇÇ)
    --   -- More annoying wrangling here; formulation of Fin-smallest-witness could
    --   -- possibly be improved.
    --   where
    --   w =
    --     let div = hom-size>O-exists-divisible _ _ _ _ size-cond
    --     in Fin-smallest-witness (Œª (t , u) ‚Üí f ‚à£? #[ t ] i h u) (fst div) (snd div)
    --   w‚ÇÅ = fst w
    --   w‚ÇÇ = snd w

    divby-aux : ‚àÄ t u ‚Üí Dec (f ‚à£ #[ t ] i h u) ‚Üí hom j h
    divby-aux t u (inl (g , _)) = g
    divby-aux O u (inr no) =
      #[ O ] j h size-cond
    divby-aux (1+ t) u (inr no) =
      divby-aux t v (f ‚à£? #[ t ] i h v)
      where v = S<-< u

    divby-discrim : ‚àÄ t u ‚Üí Dec (f ‚à£ #[ t ] i h u)
    divby-discrim t u = f ‚à£? #[ t ] i h u

    divby : ‚àÄ t ‚Üí t < hom-size i h ‚Üí hom j h
    divby t u = divby-aux t u (divby-discrim t u)

    abstract
      divby-aux= :
        ‚àÄ {t u} d {g}
        ‚Üí g ‚ó¶ f == #[ t ] i h u
        ‚Üí divby-aux t u d == g
      divby-aux= (inl (_ , q)) p = hom-is-epi _ _ _ (q ‚àô ! p)
      divby-aux= (inr no) {g} p = ‚ä•-rec $ no (g , p)

      divby= :
        ‚àÄ {t u g}
        ‚Üí g ‚ó¶ f == #[ t ] i h u
        ‚Üí divby t u == g
      divby= {t} {u} = divby-aux= (divby-discrim t u)

      divby-aux-divisible-‚ó¶ :
        ‚àÄ t u d ‚Üí f ‚à£ #[ t ] i h u ‚Üí divby-aux t u d ‚ó¶ f == #[ t ] i h u
      divby-aux-divisible-‚ó¶ t u (inl (_ , p)) f‚à£[t] = p
      divby-aux-divisible-‚ó¶ t u (inr no) f‚à£[t] = ‚ä•-rec $ no f‚à£[t]

      divby-divisible-‚ó¶ :
        ‚àÄ t u ‚Üí f ‚à£ #[ t ] i h u ‚Üí divby t u ‚ó¶ f == #[ t ] i h u
      divby-divisible-‚ó¶ t u = divby-aux-divisible-‚ó¶ t u (divby-discrim t u)

    module 6‚àô26 where
      divby-is-lub-aux :
        ‚àÄ t u d (g : hom j h)
        ‚Üí g ‚ó¶ f ‚âº #[ t ] i h u
        ‚Üí g ‚âº divby-aux t u d
      divby-is-lub-aux O u d g w = =-‚âº (! (divby-aux= d (‚âº[O] _ _ w)))
      divby-is-lub-aux (1+ t) u (inl (g' , p)) g w =
        ‚âº-cancel-r _ _ _ (transp (_ ‚âº_) (! p) w)
      divby-is-lub-aux (1+ t) u (inr no) g (inl p) =
        ‚ä•-rec $ no (g , hom= p)
      divby-is-lub-aux (1+ t) u (inr no) g (inr w) =
        divby-is-lub-aux t v d _ (‚â∫S-‚âº _ _ w)
        where
        v = S<-< u
        d = f ‚à£? #[ t ] i h v

      divby-is-lub :
        ‚àÄ t u (g : hom j h)
        ‚Üí g ‚ó¶ f ‚âº #[ t ] i h u
        ‚Üí g ‚âº divby t u
      divby-is-lub t u g w = divby-is-lub-aux t u (divby-discrim t u) g w

    open 6‚àô26 public

    module divby-smallest-divisible
      (t‚ÇÄ : ‚Ñï)
      (u‚ÇÄ : t‚ÇÄ < hom-size i h)
      (divisible : f ‚à£ #[ t‚ÇÄ ] i h u‚ÇÄ)
      (smallest : ‚àÄ t u
                  ‚Üí f ‚à£ #[ t ] i h u
                  ‚Üí t‚ÇÄ ‚â§ t)
      where
      module 6‚àô27 where
        first-divby : divby t‚ÇÄ u‚ÇÄ == #[ O ] j h size-cond
        first-divby = ‚âº[O] size-cond _ (‚âº-cancel-r _ _ _ lem)
          where
          [O] = #[ O ] j h size-cond
          [t‚ÇÄ] = #[ t‚ÇÄ ] i h u‚ÇÄ

          idx‚ÇÄ = idx-of ([O] ‚ó¶ f)
          i‚ÇÄ = fst idx‚ÇÄ
          v‚ÇÄ = snd idx‚ÇÄ

          p : divby t‚ÇÄ u‚ÇÄ ‚ó¶ f == [t‚ÇÄ]
          p = divby-divisible-‚ó¶ t‚ÇÄ u‚ÇÄ divisible

          -- Wouldn't need all this index-arrow wrangling with a more
          -- definitional representation of arrows.
          w : [t‚ÇÄ] ‚âº [O] ‚ó¶ f
          w = idx‚â§-‚âº _ _
            $ transp! (_‚â§ i‚ÇÄ) (idx-‚Ñï-hom# _)
            $ smallest i‚ÇÄ v‚ÇÄ (transp! (f ‚à£_) (hom#-idx ([O] ‚ó¶ f)) $ ‚à£‚ó¶ _ _)

          lem : divby t‚ÇÄ u‚ÇÄ ‚ó¶ f ‚âº [O] ‚ó¶ f
          lem = ‚âº-trans (=-‚âº p) w

        divby-‚ó¶-ub :
          ‚àÄ t u ‚Üí t‚ÇÄ ‚â§ t ‚Üí divby t u ‚ó¶ f ‚âº #[ t ] i h u
        divby-‚ó¶-ub t u (inl idp) = =-‚âº (divby-divisible-‚ó¶ t u d)
          where d = transp (f ‚à£_) #[]-eq divisible
        divby-‚ó¶-ub (1+ t) u (inr v) with divby-discrim (1+ t) u
        ... | inl yes = =-‚âº (snd yes)
        ... | inr no = ‚âº-‚â∫-‚âº (divby-‚ó¶-ub t w (<S-‚â§ v)) (#[ t ]‚â∫S w u)
                       where w = S<-< u

      open 6‚àô27 public

      divby-aux-<-smallest-divisible :
        ‚àÄ t u d ‚Üí t < t‚ÇÄ ‚Üí divby-aux t u d == #[ O ] j h size-cond
      divby-aux-<-smallest-divisible t u (inl yes) w =
        ‚ä•-rec $ ¬¨<-self (<-‚â§-< w (smallest _ _ yes))
      divby-aux-<-smallest-divisible O u (inr no) w = idp
      divby-aux-<-smallest-divisible (1+ t) u (inr no) w =
        divby-aux-<-smallest-divisible t v (divby-discrim t v) (S<-< w)
        where v = S<-< u

      divby-<-smallest-divisible :
        ‚àÄ t u ‚Üí t < t‚ÇÄ ‚Üí divby t u == #[ O ] j h size-cond
      divby-<-smallest-divisible t u =
        divby-aux-<-smallest-divisible t u (divby-discrim t u)

    module 6‚àô28 where
      divby-monotone :
        ‚àÄ t {u} t' {u'}
        ‚Üí t < t'
        ‚Üí divby t u ‚âº divby t' u'
      divby-monotone t .(1+ t) {u'} ltS =
        case (‚Ñï-trichotomy' t‚ÇÄ t) case-t‚ÇÄ‚â§t case-t<t‚ÇÄ
        where
        open count-factors-basic-properties i h j f

        smallest-divisible =
          let div = hom-size>O-exists-divisible size-cond in
          Fin-smallest-witness
            (Œª (t , u) ‚Üí f ‚à£? #[ t ] i h u)
            (fst div) (snd div)

        idx‚ÇÄ = fst smallest-divisible
        t‚ÇÄ = to-‚Ñï idx‚ÇÄ
        u‚ÇÄ = snd idx‚ÇÄ
        t‚ÇÄ-div = 2nd smallest-divisible
        t‚ÇÄ-sml = 3rd smallest-divisible

        open divby-smallest-divisible t‚ÇÄ u‚ÇÄ t‚ÇÄ-div (curry t‚ÇÄ-sml)

        case-t‚ÇÄ‚â§t = Œª t‚ÇÄ‚â§t ‚Üí
          divby-is-lub (1+ t) _ _ $ ‚âº-‚â∫-‚âº (divby-‚ó¶-ub t _ t‚ÇÄ‚â§t) (#[ t ]‚â∫S _ _)

        case-t<t‚ÇÄ = Œª t<t‚ÇÄ ‚Üí
          [O]-min _ _
          ‚óÇ$ transp! (_‚âº _) (divby-<-smallest-divisible _ _ t<t‚ÇÄ)

      divby-monotone t (1+ t') {u'} (ltSR w) =
        ‚âº-trans
          (divby-monotone t t' {S<-< u'} w)
          (divby-monotone t' (1+ t') ltS)

    module 6‚àô29 where

    module 6‚àô33 where
      -- ? ‚Üí count-factors

    {-
    -- Lemma 6.12 (12.10.23), and extras
    module smallest-divisible
      (t‚ÇÄ : ‚Ñï)
      (u : t‚ÇÄ < hom-size i h)
      (divisible : f ‚à£ #[ t‚ÇÄ ] i h u)
      (smallest : (t : ‚Ñï) (v : t < hom-size i h)
                  ‚Üí f ‚à£ #[ t ] i h v
                  ‚Üí t‚ÇÄ ‚â§ t)
      where
      <-smallest-divisible-divby :
        ‚àÄ t v ‚Üí (t , v) <-Fin (t‚ÇÄ , u) ‚Üí divby t v == #[ O ] j h size-cond
      <-smallest-divisible-divby O v w with f ‚à£? #[ 0 ] i h v
      ... | inl yes = ‚ä•-rec $ ¬¨‚â§> (t‚ÇÄ , u) (O , v) (smallest _ _ yes) w
      ... | inr no = idp
      <-smallest-divisible-divby (1+ t) v w with f ‚à£? #[ 1+ t ] i h v
      ... | inl yes = ‚ä•-rec $ ¬¨‚â§> (t‚ÇÄ , u) (1+ t , v) (smallest _ _ yes) w
      ... | inr no = <-smallest-divisible-divby t (S<-< v) (S<-< w)

    -- Lemma 6.13 (16.10.23)
    divby-monotone : ‚àÄ t t' u u' ‚Üí t < t' ‚Üí divby t u ‚âº divby t' u'
    divby-monotone t .(1+ t) u u' ltS =
      case (Fin-trichotomy' t‚ÇÄ (t , u)) case-t‚ÇÄ‚â§t case-t<t‚ÇÄ
      where
      open count-factors-properties i h j f

      smallest-divisible =
        let div = hom-size>O-exists-divisible size-cond
        in Fin-smallest-witness (Œª (t , u) ‚Üí f ‚à£? #[ t ] i h u) (fst div) (snd div)

      t‚ÇÄ = fst smallest-divisible
      Pt‚ÇÄ = 2nd smallest-divisible
      t‚ÇÄ-smallest = 3rd smallest-divisible

      open smallest-divisible (fst t‚ÇÄ) (snd t‚ÇÄ) Pt‚ÇÄ (curry t‚ÇÄ-smallest)

      case-t‚ÇÄ‚â§t : t‚ÇÄ ‚â§-Fin (t , u) ‚Üí divby t u ‚âº divby (1+ t) u'
      case-t‚ÇÄ‚â§t v = divby-lub (1+ t) u' _ lem
        where lem = ‚âº-‚â∫-‚âº (divby-‚ó¶-ub t u v) (#[ t ]‚â∫S u u')

      case-t<t‚ÇÄ : (t , u) <-Fin t‚ÇÄ ‚Üí divby t u ‚âº divby (1+ t) u'
      case-t<t‚ÇÄ v rewrite <-smallest-divisible-divby t u v = [O]-min size-cond _

    divby-monotone t (1+ t') u u' (ltSR v) =
      ‚âº-trans
        (divby-monotone t t' u (S<-< u') v)
        (divby-monotone t' (1+ t') (S<-< u') u' ltS)
    -}

  module 6‚àô34 where -- paper version 17.10.24
    -- Deviates slightly from paper proof.
    count-factors-shape :
      ‚àÄ i h t s {j} (f : hom i j)
      ‚Üí count-factors i h t s f ‚â§ hom-size j h
    count-factors-shape[_,_,1+_] :
      ‚àÄ i h t u {j} (f : hom i j) d
      ‚Üí count-factors[ i , h ,1+ t ] u f d ‚â§ hom-size j h

    count-factors-shape i h O s f = O‚â§ _
    count-factors-shape i h (1+ t) s f =
      count-factors-shape[ i , h ,1+ t ] (S‚â§-< s) f (count-factors-discrim t s f)

    count-factors-shape[ i , h ,1+ t ] u f (inl yes) = {!!}
    count-factors-shape[ i , h ,1+ t ] u f (inr no) =
      count-factors-shape i h t (<-shape u) f

    private -- experimental; unused
      record Shape-helper (i h t : ‚Ñï) ‚¶É s : shape i h t ‚¶Ñ : Type‚ÇÄ  where
        constructor _,_
        field
          dt : ‚Ñï
          eq : dt == hom-size i h ‚àí t

  open 6‚àô34 public

  module 6‚àô23 where -- version 17.10.24
    count-factors-full :
      ‚àÄ i h s {j} (f : hom i j)
      ‚Üí count-factors i h (hom-size i h) s f == hom-size j h
    count-factors-full = {!!}

  open 6‚àô23 public

  -- Need this too; prove it on paper:
  count-factors-comp :
    ‚àÄ i h t s {j} (f : hom i j) {k} (g : hom j k)
    ‚Üí ‚àÄ {s'}
    ‚Üí count-factors i h t s (g ‚ó¶ f)
      == count-factors j h (count-factors i h t s f) s' g
  count-factors-comp[_,_,1+_] :
    ‚àÄ i h t u {j} (f : hom i j) {k} (g : hom j k)
    ‚Üí (d : Dec (g ‚ó¶ f ‚à£ #[ t ] i h u))
    ‚Üí ‚àÄ {s'}
    ‚Üí count-factors[ i , h ,1+ t ] u (g ‚ó¶ f) d
      == count-factors j h (count-factors[ i , h ,1+ t ] u f {!!}) s' g

  count-factors-comp i h O s f g = idp
  count-factors-comp i h (1+ t) s f g =
    count-factors-comp[ i , h ,1+ t ] u f g (g ‚ó¶ f ‚à£? #[ t ] i h u)
    where u = S‚â§-< s

  count-factors-comp[ i , h ,1+ t ] u f g (inl yes) = {!!}
  count-factors-comp[ i , h ,1+ t ] u f g (inr no) = {!!}
