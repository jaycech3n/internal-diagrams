\begin{code}

{-# OPTIONS --without-K --rewriting --termination-depth=4 #-}

open import reedy.SimpleSemicategories
open import cwfs.CwFs
open import cwfs.Pi
open import cwfs.Universe

module reedy.Diagrams-Dev:9-1 {‚Ñì‚Çò·¥µ ‚Ñì‚Çí ‚Ñì‚Çò}
  (I : SimpleSemicategory ‚Ñì‚Çò·¥µ)
  (I-strictly-oriented : is-strictly-oriented I)
  {C : WildCategory ‚Ñì‚Çí ‚Ñì‚Çò}
  (cwfstr : CwFStructure C)
  (pistr : PiStructure cwfstr)
  (univstr : UniverseStructure cwfstr)
  where

open SimpleSemicategory I

import reedy.CosieveShapes as Sh
import reedy.ShapeOrder as Ord
open Sh I
open Ord I

open import reedy.ShapeCountFactors I
open ShapeCountFactors-StrictlyOriented I-strictly-oriented

open CwFStructure cwfstr renaming (_‚ó¶_ to _‚ó¶À¢·µò·µá_ ; ass to assÀ¢·µò·µá)
open PiStructure pistr
open UniverseStructure univstr
open import cwfs.Telescopes cwfstr
open Œ†‚Çú‚Çë‚Çó pistr
open TelIndexedTypes univstr

\end{code}


Declarations
------------

Mutually define the filler context
  ùîª< i ‚â° A‚ÇÄ : ùî∏‚ÇÄ, ..., A·µ¢‚Çã‚ÇÅ : ùî∏·µ¢‚Çã‚ÇÅ,
the type Match of the matching functor, and
the actual matching functor MF.

\begin{code}

ùîª< : (b : ‚Ñï) ‚Üí Con
record Match (b : ‚Ñï) (bsh‚ÇÄ : [ b ]BoundedShape) : Type (‚Ñì‚Çí ‚à™ ‚Ñì‚Çò ‚à™ ‚Ñì‚Çò·¥µ)
MF< : (b : ‚Ñï) (bsh‚ÇÄ : [ b ]BoundedShape) ‚Üí Match b bsh‚ÇÄ

\end{code}


Definitions
-----------

ùîª< and Match can be defined immediately.

\begin{code}

record Match b bsh‚ÇÄ where
  eta-equality
  field
    M·µí : (bsh : [ b ]BoundedShape) ‚Üí bsh ‚â§‚Çõ·µá bsh‚ÇÄ ‚Üí Tel (ùîª< b)

  M : (bsh : [ b ]BoundedShape) ‚Üí bsh ‚â§‚Çõ·µá bsh‚ÇÄ ‚Üí Con
  M bsh w = close $ M·µí bsh w

  field
    M‚Éó :
      (bsh@(shape i h t s , u) : [ b ]BoundedShape)
      (w : bsh ‚â§‚Çõ·µá bsh‚ÇÄ)
      {j : ‚Ñï} (f : hom i j)
      ‚Üí let r = count-factors i h t s f in
        (rs : is-shape j h r)
      ‚Üí let rsh = shape j h r rs , u in
        (rw : rsh ‚â§‚Çõ·µá bsh‚ÇÄ)
      ‚Üí Sub (M bsh w) (M rsh rw)

ùîª< O = ‚óÜ
ùîª< (1+ O) = ‚óÜ ‚à∑ U
ùîª< (2+ b) = ùîª< (1+ b) ‚à∑ Œ†‚Çú‚Çë‚Çó (Match.M·µí (MF< (1+ b) tot) tot (inl idp)) U
  where tot = total-shape-1+ b , ltS

\end{code}


Definition of MF<
-----------------

We define (MF< b) for b = 1 and b = 2+ b' separately.

In each case, the definition of (MF< b bsh‚ÇÄ) is by well founded induction on the
order <‚Çõ·µá on b-bounded shapes. Concretely, this means we construct (MF< b bsh‚ÇÄ)
assuming
  MF<-ind : ‚àÄ bsh ‚Üí bsh < bsh‚ÇÄ ‚Üí Match b bsh.

For each b, we further distinguish cases for
  bsh‚ÇÄ ‚àà {
    (0, 0, 0),
    (1+ i‚ÇÄ, 0, 0),
    (i‚ÇÄ, 1+ h‚ÇÄ, 0),
    (i‚ÇÄ, h‚ÇÄ, 1+ t‚ÇÄ)
    }
so that we can refer to the immediate predecessor of bsh‚ÇÄ.

\begin{code}

module MF<1 where

  \end{code}

  In the base case bsh‚ÇÄ = (0, 0, 0), everything is trivial.

  \begin{code}

  module case[0,0,0] s‚ÇÄ where

    bsh‚ÇÄ = shape O O O s‚ÇÄ , ltS

    M·µí : ‚àÄ bsh ‚Üí bsh ‚â§‚Çõ·µá bsh‚ÇÄ ‚Üí Tel (ùîª< 1)
    M·µí bsh w = ‚Ä¢

    M : ‚àÄ bsh ‚Üí bsh ‚â§‚Çõ·µá bsh‚ÇÄ ‚Üí Con
    M bsh w = close $ M·µí bsh w

    M‚Éó :
      (bsh@(shape i h t s , u) : [ 1 ]BoundedShape)
      (w : bsh ‚â§‚Çõ·µá bsh‚ÇÄ)
      {j : ‚Ñï} (f : hom i j)
      ‚Üí let r = count-factors i h t s f in
        (rs : is-shape j h r)
      ‚Üí let rsh = shape j h r rs , u in
        (rw : rsh ‚â§‚Çõ·µá bsh‚ÇÄ)
      ‚Üí Sub (M bsh w) (M rsh rw)
    M‚Éó bsh (inl idp) {j} f rs rw = ‚ä•-rec (‚âÆO j (hom-inverse _ _ f))
    M‚Éó bsh (inr (on-ùëñ ())) f rs rw
    M‚Éó bsh (inr (on-‚Ñé ())) f rs rw
    M‚Éó bsh (inr (on-ùë° ())) f rs rw


  module case[1+i‚ÇÄ,0,0] i‚ÇÄ s‚ÇÄ
    (ind :
      (bsh : [ 1 ]BoundedShape)
      ‚Üí bsh <‚Çõ·µá shape (1+ i‚ÇÄ) O O s‚ÇÄ , ltS
      ‚Üí Match 1 bsh)
    where

    bsh‚ÇÄ = shape (1+ i‚ÇÄ) O O s‚ÇÄ , ltS
    pbsh‚ÇÄ = full-bshape i‚ÇÄ O ltS

    -- The matching functor up to the previous 1-bounded shape
    MF[i‚ÇÄ,0,full] = ind pbsh‚ÇÄ (on-ùëñ ltS)
    -- and its components
    M·µí[i‚ÇÄ,0,full] = Match.M·µí MF[i‚ÇÄ,0,full]
    M‚Éó[i‚ÇÄ,0,full] = Match.M‚Éó MF[i‚ÇÄ,0,full]

    M·µí : ‚àÄ bsh ‚Üí bsh ‚â§‚Çõ·µá bsh‚ÇÄ ‚Üí Tel (ùîª< 1)
    M·µí bsh (inl idp) = ‚Ä¢

    -- For bsh < bsh‚ÇÄ, take definitions from MF at the predecessor of bsh‚ÇÄ.
    -- We'd think to just immediately define:
    --   M·µí bsh@(sh , u) (inr w) = M·µí[i‚ÇÄ,0,full] bsh bsh‚â§pbsh‚ÇÄ
    --     where bsh‚â§pbsh‚ÇÄ = bdd-<‚ÇõSùëñ00-‚â§‚Çõùëñbfull sh u w
    -- !! But then, the type of M‚Éó would require a proof of a particular equality
    -- !! to be maintained *across* the induction: specifically, we'd need to
    -- !! know something like
    -- !!   Match.M·µí (ind bsh _) (j, 0, 0) == ‚Ä¢
    -- !! for bsh < bsh‚ÇÄ and (j, 0, 0) ‚â§ bsh.
    -- !! Thus we instead split into cases on bsh, and *define* M·µí to be ‚Ä¢ in
    -- !! the case that we need.
    -- Summary: in order to have convenient definitional equalities when
    -- defining M‚Éó, we first split into cases on bsh.
    M·µí (shape i O O s , u) (inr w) = ‚Ä¢ -- want this definitionally
    M·µí bsh@(shape i O (1+ t) s , u) (inr w) =
      M·µí[i‚ÇÄ,0,full] bsh bsh‚â§pbsh‚ÇÄ
      where bsh‚â§pbsh‚ÇÄ = bdd-<‚ÇõSùëñ00-‚â§‚Çõùëñbfull (fst bsh) u w
    M·µí (shape i (1+ h) t s , ltSR ()) (inr w)

    M : ‚àÄ bsh ‚Üí bsh ‚â§‚Çõ·µá bsh‚ÇÄ ‚Üí Con
    M bsh w = close $ M·µí bsh w

    M‚Éó :
      (bsh@(shape i h t s , u) : [ 1 ]BoundedShape)
      (w : bsh ‚â§‚Çõ·µá bsh‚ÇÄ)
      {j : ‚Ñï} (f : hom i j)
      ‚Üí let r = count-factors i h t s f in
        (rs : is-shape j h r)
      ‚Üí let rsh = shape j h r rs , u in
        (rw : rsh ‚â§‚Çõ·µá bsh‚ÇÄ)
      ‚Üí Sub (M bsh w) (M rsh rw)

    M‚Éó bsh (inl idp) f .s‚ÇÄ (inl idp) = ‚ä•-rec (¬¨<-self (hom-inverse _ _ f))
    M‚Éó bsh (inl idp) {j} f rs (inr rw) = id

    M‚Éó bsh (inr w) f rs (inl p) = {!-- impossible; bsh < bsh‚ÇÄ, f : i ‚Üí j and j == i‚ÇÄ!}
    M‚Éó bsh@(shape i .O O s , ltS) (inr w) f rs (inr rw) = id
    -- The case splitting on bsh in the definition of (M·µí bsh (inr w)) above
    -- means we have to case-analyze (count-factors i 0 (1+ t) s f) in the type
    -- below.
    M‚Éó bsh@(shape i .O (1+ t) s , ltS) (inr w) f rs (inr rw) = {!!}


  module case[i‚ÇÄ,0,1+t‚ÇÄ] i‚ÇÄ t‚ÇÄ s‚ÇÄ
    (ind :
      (bsh : [ 1 ]BoundedShape)
      ‚Üí bsh <‚Çõ·µá shape i‚ÇÄ O (1+ t‚ÇÄ) s‚ÇÄ , ltS
      ‚Üí Match 1 bsh)
    where

    bsh‚ÇÄ = shape i‚ÇÄ O (1+ t‚ÇÄ) s‚ÇÄ , ltS
    pbsh‚ÇÄ = prev-bshape s‚ÇÄ ltS -- ‚â° shape i‚ÇÄ O t‚ÇÄ (prev-is-shape s‚ÇÄ) , ltS

    -- The matching functor up to the previous 1-bounded shape
    MF[i‚ÇÄ,0,t‚ÇÄ] = ind pbsh‚ÇÄ (on-ùë° ltS)
    -- and its components
    M·µí[i‚ÇÄ,0,t‚ÇÄ] = Match.M·µí MF[i‚ÇÄ,0,t‚ÇÄ]
    M‚Éó[i‚ÇÄ,0,t‚ÇÄ] = Match.M‚Éó MF[i‚ÇÄ,0,t‚ÇÄ]

    M·µí : ‚àÄ bsh ‚Üí bsh ‚â§‚Çõ·µá bsh‚ÇÄ ‚Üí Tel (ùîª< 1)
    -- Copy previous definition if bsh < bsh‚ÇÄ
    M·µí bsh (inr w) = M·µí[i‚ÇÄ,0,t‚ÇÄ] bsh bsh‚â§pbsh‚ÇÄ
      where bsh‚â§pbsh‚ÇÄ = <‚ÇõSùë°-‚â§‚Çõùë° (fst bsh) w
    -- Otherwise, define:
    M·µí (shape .i‚ÇÄ .O .(1+ t‚ÇÄ) .s‚ÇÄ , ltS) (inl idp) = pM·µí ‚Ä£ A‚ÇÄ [ œÄ‚Çú‚Çë‚Çó pM·µí ]
      where
      pM·µí = M·µí[i‚ÇÄ,0,t‚ÇÄ] pbsh‚ÇÄ (inl idp)
      A‚ÇÄ : Ty (ùîª< 1)
      A‚ÇÄ = generic-closed-type-in ‚óÜ

    M : ‚àÄ bsh ‚Üí bsh ‚â§‚Çõ·µá bsh‚ÇÄ ‚Üí Con
    M bsh w = close $ M·µí bsh w

    \end{code}

    When we define (M‚Éó (i‚ÇÄ, O, 1+t‚ÇÄ) f), we require its type to compute to the
    appropriate value, depending on whether or not f divides [t]‚Å±‚Çï. To actually
    allow this computation to occur, this type needs to expose the discriminant as
    an extra argument of type (Dec (f ‚à£ #[ t‚ÇÄ ] i‚ÇÄ 0 _)).

    \begin{code}

    M‚Éó[i‚ÇÄ,0,1+t‚ÇÄ]-deptype :
      {j : ‚Ñï} (f : hom i‚ÇÄ j)
      ‚Üí let v‚ÇÄ = <-from-is-shape s‚ÇÄ in
        (d : Dec (f ‚à£ #[ t‚ÇÄ ] i‚ÇÄ O v‚ÇÄ))
      ‚Üí let r = count-factors-aux i‚ÇÄ O t‚ÇÄ v‚ÇÄ f d in
        (rs : is-shape j O r)
      ‚Üí let rsh = shape j O r rs , ltS in
        (rw : rsh ‚â§‚Çõ·µá bsh‚ÇÄ)
      ‚Üí Type _
    M‚Éó[i‚ÇÄ,0,1+t‚ÇÄ]-deptype {j} f d rs rw =
      Sub (M (shape i‚ÇÄ O (1+ t‚ÇÄ) s‚ÇÄ , ltS) (inl idp))
          (M (shape j O r rs , ltS) rw)
      where v‚ÇÄ = <-from-is-shape s‚ÇÄ
            r = count-factors-aux i‚ÇÄ O t‚ÇÄ v‚ÇÄ f d

    \end{code}

    We expose the discriminant in an auxiliary implementation of M‚Éó (i, h, t+1); this
    will be needed when defining M‚Éó‚ó¶.

    \begin{code}

    M‚Éó[i‚ÇÄ,0,1+t‚ÇÄ] :
      {j : ‚Ñï} (f : hom i‚ÇÄ j)
      ‚Üí let v‚ÇÄ = <-from-is-shape s‚ÇÄ in
        (d : Dec (f ‚à£ #[ t‚ÇÄ ] i‚ÇÄ O v‚ÇÄ))
      ‚Üí let r = count-factors-aux i‚ÇÄ O t‚ÇÄ v‚ÇÄ f d in
        (rs : is-shape j O r)
      ‚Üí let rsh = shape j O r rs , ltS in
        (rw : rsh ‚â§‚Çõ·µá bsh‚ÇÄ)
      ‚Üí M‚Éó[i‚ÇÄ,0,1+t‚ÇÄ]-deptype f d rs rw
    M‚Éó[i‚ÇÄ,0,1+t‚ÇÄ] f (inl yes) rs rw = {!!}
    M‚Éó[i‚ÇÄ,0,1+t‚ÇÄ] f (inr no) rs (inl p) = {!-- impossible!}
    M‚Éó[i‚ÇÄ,0,1+t‚ÇÄ] f (inr no) rs (inr rw) =
      M‚Éó[i‚ÇÄ,0,t‚ÇÄ] pbsh‚ÇÄ (inl idp) f rs rsh‚â§pbsh‚ÇÄ ‚ó¶À¢·µò·µá œÄ _
      where rsh‚â§pbsh‚ÇÄ = <‚ÇõSùë°-‚â§‚Çõùë° (rstr‚Çõ (fst pbsh‚ÇÄ) f rs) rw

    \end{code}

    \begin{code}

    M‚Éó :
      (bsh@(shape i h t s , u) : [ 1 ]BoundedShape)
      (w : bsh ‚â§‚Çõ·µá bsh‚ÇÄ)
      {j : ‚Ñï} (f : hom i j)
      ‚Üí let r = count-factors i h t s f in
        (rs : is-shape j h r)
      ‚Üí let rsh = shape j h r rs , u in
        (rw : rsh ‚â§‚Çõ·µá bsh‚ÇÄ)
      ‚Üí Sub (M bsh w) (M rsh rw)

    M‚Éó bsh (inr w) f rs (inl p) = {!p!}

    M‚Éó bsh (inr w) f rs (inr rw) =
      M‚Éó[i‚ÇÄ,0,t‚ÇÄ] bsh bsh‚â§pbsh‚ÇÄ f rs rsh‚â§pbsh‚ÇÄ
      where
      bsh‚â§pbsh‚ÇÄ = <‚ÇõSùë°-‚â§‚Çõùë° (fst bsh) w

      -- Need the exact definition of rsh‚â§pbsh‚ÇÄ below, otherwise this clause's
      -- definition does not typecheck!
      -- e.g. this alternative definition doesn't work:
      -- ‚â§‚Çõ-trans (rstr‚Çõ-‚â§‚Çõ (fst bsh) f) (<‚ÇõSùë°-‚â§‚Çõùë° (fst bsh) w)
      rsh‚â§pbsh‚ÇÄ = <‚ÇõSùë°-‚â§‚Çõùë° (rstr‚Çõ (fst bsh) f rs) rw

    M‚Éó (shape .i‚ÇÄ .O .(1+ t‚ÇÄ) .s‚ÇÄ , ltS) (inl idp) {j} f rs rw =
      M‚Éó[i‚ÇÄ,0,1+t‚ÇÄ] f (discrim i‚ÇÄ O t‚ÇÄ (<-from-is-shape s‚ÇÄ) f) rs rw

    \end{code}

\begin{code}

module MF<2+ (b : ‚Ñï) where

  module case[0,0,0] s‚ÇÄ u‚ÇÄ where

    bsh‚ÇÄ : [ 2+ b ]BoundedShape
    bsh‚ÇÄ = shape O O O s‚ÇÄ , u‚ÇÄ

    M·µí : ‚àÄ bsh ‚Üí bsh ‚â§‚Çõ·µá bsh‚ÇÄ ‚Üí Tel (ùîª< (2+ b))
    M·µí bsh w = ‚Ä¢

    M : ‚àÄ bsh ‚Üí bsh ‚â§‚Çõ·µá bsh‚ÇÄ ‚Üí Con
    M bsh w = close $ M·µí bsh w

    M‚Éó :
      (bsh@(shape i h t s , u) : [ 2+ b ]BoundedShape)
      (w : bsh ‚â§‚Çõ·µá bsh‚ÇÄ)
      {j : ‚Ñï} (f : hom i j)
      ‚Üí let r = count-factors i h t s f in
        (rs : is-shape j h r)
      ‚Üí let rsh = shape j h r rs , u in
        (rw : rsh ‚â§‚Çõ·µá bsh‚ÇÄ)
      ‚Üí Sub (M bsh w) (M rsh rw)
    M‚Éó bsh (inl idp) {j} f rs rw = ‚ä•-rec (‚âÆO j (hom-inverse _ _ f))
    M‚Éó bsh (inr (on-ùëñ ())) f rs rw
    M‚Éó bsh (inr (on-‚Ñé ())) f rs rw
    M‚Éó bsh (inr (on-ùë° ())) f rs rw

  module case[1+i‚ÇÄ,0,0] i‚ÇÄ s‚ÇÄ u‚ÇÄ
    (ind :
      (bsh : [ 2+ b ]BoundedShape)
      ‚Üí bsh <‚Çõ·µá shape (1+ i‚ÇÄ) O O s‚ÇÄ , u‚ÇÄ
      ‚Üí Match (2+ b) bsh)
    where

    bsh‚ÇÄ : [ 2+ b ]BoundedShape
    bsh‚ÇÄ = shape (1+ i‚ÇÄ) O O s‚ÇÄ , u‚ÇÄ

    pbsh‚ÇÄ = full-bshape i‚ÇÄ (1+ b) ltS

    MF[i‚ÇÄ,1+b,full] = ind pbsh‚ÇÄ (on-ùëñ ltS)
    M·µí[i‚ÇÄ,1+b,full] = Match.M·µí MF[i‚ÇÄ,1+b,full]
    M‚Éó[i‚ÇÄ,1+b,full] = Match.M‚Éó MF[i‚ÇÄ,1+b,full]

    M·µí : ‚àÄ bsh ‚Üí bsh ‚â§‚Çõ·µá bsh‚ÇÄ ‚Üí Tel (ùîª< (2+ b))
    M·µí bsh (inl p) = ‚Ä¢
    M·µí bsh@(shape i O O s , u) (inr w) = ‚Ä¢ -- want this definitionally
    M·µí bsh@(shape i O (1+ t) s , u) (inr w) =
      M·µí[i‚ÇÄ,1+b,full] bsh bsh‚â§pbsh‚ÇÄ
      where bsh‚â§pbsh‚ÇÄ = bdd-<‚ÇõSùëñ00-‚â§‚Çõùëñbfull (fst bsh) u w
    M·µí bsh@(shape i (1+ h) t s , u) (inr w) =
      M·µí[i‚ÇÄ,1+b,full] bsh bsh‚â§pbsh‚ÇÄ
      where bsh‚â§pbsh‚ÇÄ = bdd-<‚ÇõSùëñ00-‚â§‚Çõùëñbfull (fst bsh) u w

    M : ‚àÄ bsh ‚Üí bsh ‚â§‚Çõ·µá bsh‚ÇÄ ‚Üí Con
    M bsh w = close $ M·µí bsh w

    M‚Éó :
      (bsh@(shape i h t s , u) : [ 2+ b ]BoundedShape)
      (w : bsh ‚â§‚Çõ·µá bsh‚ÇÄ)
      {j : ‚Ñï} (f : hom i j)
      ‚Üí let r = count-factors i h t s f in
        (rs : is-shape j h r)
      ‚Üí let rsh = shape j h r rs , u in
        (rw : rsh ‚â§‚Çõ·µá bsh‚ÇÄ)
      ‚Üí Sub (M bsh w) (M rsh rw)

    M‚Éó bsh (inl idp) {j} f rs (inl q) =
      ‚ä•-rec $ ¬¨<-self $ hom-inverse _ _ f ‚óÇ$ transp (_< 1+ i‚ÇÄ) q'
      where
      q' : j == 1+ i‚ÇÄ
      q' = shape=-ùëñ= q
    M‚Éó bsh (inl idp) f rs (inr rw) = id

    M‚Éó bsh (inr w) f rs rw = {!!}

  module case[i‚ÇÄ,1+h‚ÇÄ,0] i‚ÇÄ h‚ÇÄ s‚ÇÄ u‚ÇÄ
    (ind :
      (bsh : [ 2+ b ]BoundedShape)
      ‚Üí bsh <‚Çõ·µá shape i‚ÇÄ (1+ h‚ÇÄ) O s‚ÇÄ , u‚ÇÄ
      ‚Üí Match (2+ b) bsh)
    where

    bsh‚ÇÄ : [ 2+ b ]BoundedShape
    bsh‚ÇÄ = shape i‚ÇÄ (1+ h‚ÇÄ) O s‚ÇÄ , u‚ÇÄ

    pbsh‚ÇÄ = full-bshape i‚ÇÄ h‚ÇÄ (S<-< u‚ÇÄ)

    MF[i‚ÇÄ,h‚ÇÄ,full] = ind pbsh‚ÇÄ (on-‚Ñé ltS)
    M·µí[i‚ÇÄ,h‚ÇÄ,full] = Match.M·µí MF[i‚ÇÄ,h‚ÇÄ,full]
    M‚Éó[i‚ÇÄ,h‚ÇÄ,full] = Match.M‚Éó MF[i‚ÇÄ,h‚ÇÄ,full]

    M·µí : ‚àÄ bsh ‚Üí bsh ‚â§‚Çõ·µá bsh‚ÇÄ ‚Üí Tel (ùîª< (2+ b))
    M·µí bsh (inl p) = M·µí[i‚ÇÄ,h‚ÇÄ,full] pbsh‚ÇÄ (inl idp)
    -- Similarly to the (1+ i‚ÇÄ, 0, 0) case, we further split on bsh in the case
    -- bsh < bsh‚ÇÄ in order to obtain definitional equalities and avoid the
    -- thorny problem of having to define coherences across the well founded
    -- induction.
    M·µí bsh@(shape i (1+ h) O s , u) (inr w) =
      M·µí[i‚ÇÄ,h‚ÇÄ,full] pbsh pbsh‚â§pbsh‚ÇÄ -- want this definitionally
      where
      pbsh = full-bshape i h (S<-< u)
      bsh‚â§pbsh‚ÇÄ = <‚ÇõS‚Ñé0-‚â§‚Çõ‚Ñéfull (fst bsh) w
      pbsh‚â§pbsh‚ÇÄ = ‚â§‚Çõ-trans (inr (on-‚Ñé ltS)) bsh‚â§pbsh‚ÇÄ
    M·µí bsh@(shape i (1+ h) (1+ t) s , u) (inr w) =
      M·µí[i‚ÇÄ,h‚ÇÄ,full] bsh bsh‚â§pbsh‚ÇÄ
      where bsh‚â§pbsh‚ÇÄ = <‚ÇõS‚Ñé0-‚â§‚Çõ‚Ñéfull (fst bsh) w
    M·µí bsh@(shape i O t s , u) (inr w) =
      M·µí[i‚ÇÄ,h‚ÇÄ,full] bsh bsh‚â§pbsh‚ÇÄ
      where bsh‚â§pbsh‚ÇÄ = <‚ÇõS‚Ñé0-‚â§‚Çõ‚Ñéfull (fst bsh) w

    M : ‚àÄ bsh ‚Üí bsh ‚â§‚Çõ·µá bsh‚ÇÄ ‚Üí Con
    M bsh w = close $ M·µí bsh w

    M‚Éó :
      (bsh@(shape i h t s , u) : [ 2+ b ]BoundedShape)
      (w : bsh ‚â§‚Çõ·µá bsh‚ÇÄ)
      {j : ‚Ñï} (f : hom i j)
      ‚Üí let r = count-factors i h t s f in
        (rs : is-shape j h r)
      ‚Üí let rsh = shape j h r rs , u in
        (rw : rsh ‚â§‚Çõ·µá bsh‚ÇÄ)
      ‚Üí Sub (M bsh w) (M rsh rw)

    M‚Éó bsh (inl idp) {j} f rs (inl q) =
      ‚ä•-rec $ ¬¨<-self $ hom-inverse _ _ f ‚óÇ$ transp (_< i‚ÇÄ) q'
      where
      q' : j == i‚ÇÄ
      q' = shape=-ùëñ= q
    M‚Éó bsh (inl idp) f rs (inr rw) =
      idd {!!} ‚ó¶À¢·µò·µá M‚Éó[i‚ÇÄ,h‚ÇÄ,full] pbsh‚ÇÄ (inl idp) f rs' rstr‚â§pbsh‚ÇÄ
      where
      rs' = count-factors-is-shape i‚ÇÄ h‚ÇÄ (hom-size i‚ÇÄ h‚ÇÄ) _ f
      rstr‚â§pbsh‚ÇÄ = rstr‚Çõ-‚â§‚Çõ (fst pbsh‚ÇÄ) f
    M‚Éó bsh (inr w) f rs (inl p) = {!-- impossible!}
    M‚Éó bsh (inr w) f rs (inr rw) = {!!}


  module case[i‚ÇÄ,h‚ÇÄ,1+t‚ÇÄ] i‚ÇÄ h‚ÇÄ t‚ÇÄ s‚ÇÄ u‚ÇÄ
    (ind :
      (bsh : [ 2+ b ]BoundedShape)
      ‚Üí bsh <‚Çõ·µá shape i‚ÇÄ h‚ÇÄ (1+ t‚ÇÄ) s‚ÇÄ , u‚ÇÄ
      ‚Üí Match (2+ b) bsh)
    where

    bsh‚ÇÄ : [ 2+ b ]BoundedShape
    bsh‚ÇÄ = shape i‚ÇÄ h‚ÇÄ (1+ t‚ÇÄ) s‚ÇÄ , u‚ÇÄ

    pbsh‚ÇÄ = prev-bshape s‚ÇÄ u‚ÇÄ

    MF[i‚ÇÄ,h‚ÇÄ,t‚ÇÄ] = ind pbsh‚ÇÄ (on-ùë° ltS)
    M·µí[i‚ÇÄ,h‚ÇÄ,t‚ÇÄ] = Match.M·µí MF[i‚ÇÄ,h‚ÇÄ,t‚ÇÄ]
    M‚Éó[i‚ÇÄ,h‚ÇÄ,t‚ÇÄ] = Match.M‚Éó MF[i‚ÇÄ,h‚ÇÄ,t‚ÇÄ]

    M·µí : ‚àÄ bsh ‚Üí bsh ‚â§‚Çõ·µá bsh‚ÇÄ ‚Üí Tel (ùîª< (2+ b))
    M·µí bsh (inr w) = M·µí[i‚ÇÄ,h‚ÇÄ,t‚ÇÄ] bsh bsh‚â§pbsh‚ÇÄ
      where bsh‚â§pbsh‚ÇÄ = <‚ÇõSùë°-‚â§‚Çõùë° (fst bsh) w

    M·µí (shape .i‚ÇÄ h‚ÇÄ .(1+ t‚ÇÄ) .s‚ÇÄ , u) (inl idp) =
      pM·µí ‚Ä£ {!!}
      where
      pM·µí : Tel (ùîª< (2+ b))
      pM·µí = M·µí[i‚ÇÄ,h‚ÇÄ,t‚ÇÄ] pbsh‚ÇÄ (inl idp)

      -- Need to use "A‚Çï‚ÇÄ : ùî∏‚Çï‚ÇÄ";
      -- but what are their types, which indices exactly?
      -- ùî∏‚Çï‚ÇÄ : Ty (ùîª)

    M : ‚àÄ bsh ‚Üí bsh ‚â§‚Çõ·µá bsh‚ÇÄ ‚Üí Con
    M bsh w = close $ M·µí bsh w


\end{code}


Put everything together:
------------------------

\begin{code}

MF<[1+_]-inddef :
  ‚àÄ b (bsh‚ÇÄ : [ 1+ b ]BoundedShape)
  ‚Üí ((bsh : [ 1+ b ]BoundedShape) ‚Üí bsh <‚Çõ·µá bsh‚ÇÄ ‚Üí Match (1+ b) bsh)
  ‚Üí Match (1+ b) bsh‚ÇÄ

MF<[1+ O ]-inddef (shape O O O s‚ÇÄ , ltS) ind =
  record { M·µí = M·µí ; M‚Éó = M‚Éó }
  where open MF<1.case[0,0,0] s‚ÇÄ
MF<[1+ O ]-inddef (shape (1+ i‚ÇÄ) O O s‚ÇÄ , ltS) ind =
  record { M·µí = M·µí ; M‚Éó = M‚Éó }
  where open MF<1.case[1+i‚ÇÄ,0,0] i‚ÇÄ s‚ÇÄ ind
MF<[1+ O ]-inddef (shape i‚ÇÄ .O (1+ t‚ÇÄ) s‚ÇÄ , ltS) ind =
  record { M·µí = M·µí ; M‚Éó = M‚Éó }
  where open MF<1.case[i‚ÇÄ,0,1+t‚ÇÄ] i‚ÇÄ t‚ÇÄ s‚ÇÄ ind
-- MF<[1+ O ]-inddef (shape i‚ÇÄ (1+ h‚ÇÄ) O s , ltSR ()) ind is impossible

MF<[1+ 1+ b ]-inddef (shape O O O s‚ÇÄ , u‚ÇÄ) ind =
  record { M·µí = M·µí ; M‚Éó = M‚Éó } where
    open MF<2+ b
    open case[0,0,0] s‚ÇÄ u‚ÇÄ
MF<[1+ 1+ b ]-inddef (shape (1+ i‚ÇÄ) O O s‚ÇÄ , u‚ÇÄ) ind = {!!}
MF<[1+ 1+ b ]-inddef (shape i‚ÇÄ (1+ h‚ÇÄ) O s‚ÇÄ , u‚ÇÄ) ind = {!!}
MF<[1+ 1+ b ]-inddef (shape i‚ÇÄ h‚ÇÄ (1+ t‚ÇÄ) s‚ÇÄ , u‚ÇÄ) ind = {!!}

MF< (1+ b) =
  wf-ind (Match (1+ b)) MF<[1+ b ]-inddef
  where
  open
    WellFoundedInduction [ 1+ b ]BoundedShape _<‚Çõ·µá_
      (Œª bsh‚ÇÄ ‚Üí <‚Çõ·µá-wf {bsh = bsh‚ÇÄ})

\end{code}
