\begin{code}

{-# OPTIONS --without-K --rewriting --termination-depth=10 #-}

open import reedy.SimpleSemicategories
open import cwfs.CwFs
open import cwfs.Pi
open import cwfs.Universe

module reedy.Diagrams-Outer-Parametrization-By-Height-and-Apex-Bound {‚Ñì‚Çò·¥µ ‚Ñì‚Çí ‚Ñì‚Çò}
  (I : SimpleSemicategory ‚Ñì‚Çò·¥µ)
  (I-strictly-oriented : is-strictly-oriented I)
  {C : WildCategory ‚Ñì‚Çí ‚Ñì‚Çò}
  (cwfstr : CwFStructure C)
  (pistr : PiStructure cwfstr)
  (univstr : UniverseStructure cwfstr)
  where

open SimpleSemicategory I
open import reedy.Cosieves I
open Cosieves-StrictlyOriented I-strictly-oriented

open CwFStructure cwfstr renaming (_‚ó¶_ to _‚ó¶À¢·µò·µá_ ; ass to assÀ¢·µò·µá)
open PiStructure pistr
open UniverseStructure univstr
open import cwfs.Telescopes cwfstr
open Œ†‚Çú‚Çë‚Çó pistr
open TelIndexedTypes univstr


ùîª[_] : ‚Ñï ‚Üí Con

M·µí[_] :
  (b : ‚Ñï) (i h t : ‚Ñï) (s : shape i h t)
  ‚Üí b < i ‚Üí h ‚â§ b
  ‚Üí Tel ùîª[ b ]

M‚Éó[_] :
  (b : ‚Ñï) (i h t : ‚Ñï) (s : shape i h t)
  (b·µ¢ : b < i) (b‚Çï : h ‚â§ b)
  (j : ‚Ñï) (b‚±º : b < j) (f : hom i j)
  ‚Üí let cf = count-factors i h t s f in
    (cfs : shape j h cf)
  ‚Üí Sub (ùîª[ b ] ++‚Çú‚Çë‚Çó M·µí[ b ] i h t s b·µ¢ b‚Çï) (ùîª[ b ] ++‚Çú‚Çë‚Çó M·µí[ b ] j h cf cfs b‚±º b‚Çï)

ùîª[ O ] = ‚óÜ ‚à∑ U
ùîª[ 1+ b ] = ùîª[ b ] ‚à∑ Œ†‚Çú‚Çë‚Çó (M·µí[ b ] (1+ b) b (hom-size (1+ b) b) (total-shape-1+ b) ltS lteE) U


M·µí[ O ] i h O s b·µ¢ b‚Çï = ‚Ä¢
M·µí[ O ] i h (1+ t) s b·µ¢ b‚Çï =
  let M·µí[O]-prev = M·µí[ O ] i h t prev b·µ¢ b‚Çï in
  M·µí[O]-prev ‚Ä£ A‚ÇÄ [ œÄ‚Çú‚Çë‚Çó M·µí[O]-prev ]
  where
  prev = prev-shape s
  A‚ÇÄ = generic[ ‚óÜ ]type

M·µí[ 1+ b ] i h t s b·µ¢ b‚Çï = {!!}


M‚Éó[ O ] i h t s b·µ¢ b‚Çï j b‚±º f cfs = {!!}

M‚Éó[ 1+ b ] i h t s b·µ¢ b‚Çï j b‚±º f cfs = {!!}


{-
M·µí[ O ] i .O O s (inl idp) = ‚Ä¢
M·µí[ O ] i .O (1+ t) s (inl idp) =
  let M·µí[O]-prev = M·µí[ O ] i O t prev lteE in
  M·µí[O]-prev ‚Ä£ A‚ÇÄ [ œÄ‚Çú‚Çë‚Çó M·µí[O]-prev ]
  where
  prev = prev-shape s
  A‚ÇÄ = generic[ ‚óÜ ]type

M·µí[ 1+ b ] i h t s (inr w) = wk‚Çú‚Çë‚Çó $ M·µí[ b ] i h t s (<S-‚â§ w)
M·µí[ 1+ b ] i .(1+ b) O s (inl idp) = wk‚Çú‚Çë‚Çó $ M·µí[ b ] i b (hom-size i b) (full-shape i b) lteE
M·µí[ 1+ b ] i .(1+ b) (1+ t) s (inl idp) =
  {!M·µí[ 1+ b ] i (1+ b)!}


M‚Éó[ O ] i .O O s (inl idp) f cfs = id
M‚Éó[ O ] i .O (1+ t) s (inl idp) f cfs = {!!}

M‚Éó[ 1+ b ] i h t s (inr w) {j} f cfs =
  let
    M·µí[b] = M·µí[ b ] i h t s (<S-‚â§ w)
    M·µí‚àôf = M·µí[ b ] j h (count-factors i h t s f) cfs (<S-‚â§ w)
    M·µí[b]tot[1+b] = M·µí[ b ] (1+ b) b (hom-size (1+ b) b) (total-shape-1+ b) lteE
    ùî∏[1+b] = Œ†‚Çú‚Çë‚Çó M·µí[b]tot[1+b] U
  in
  wkn-sub M·µí[b] M·µí‚àôf (M‚Éó[ b ] i h t s (<S-‚â§ w) f cfs) {!!} ùî∏[1+b]
M‚Éó[ 1+ b ] i h t s (inl idp) f cfs = {!!}
-}

\end{code}
