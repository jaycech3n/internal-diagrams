\begin{code}

{-# OPTIONS --without-K --rewriting #-}

open import reedy.SimpleSemicategories
open import cwfs.CwFs
open import cwfs.Pi
open import cwfs.Universe

module reedy.Diagrams-Dev:7 {‚Ñì‚Çò·¥µ ‚Ñì‚Çí ‚Ñì‚Çò}
  (I : SimpleSemicategory ‚Ñì‚Çò·¥µ)
  (I-strictly-oriented : is-strictly-oriented I)
  {C : WildCategory ‚Ñì‚Çí ‚Ñì‚Çò}
  (cwfstr : CwFStructure C)
  (pistr : PiStructure cwfstr)
  (univstr : UniverseStructure cwfstr)
  where

open SimpleSemicategory I

import reedy.CosieveShapes as Sh
import reedy.ShapeOrder as Ord
open Sh I
open Ord I

open import reedy.ShapeCountFactors I
open ShapeCountFactors-StrictlyOriented I-strictly-oriented

open CwFStructure cwfstr renaming (_‚ó¶_ to _‚ó¶À¢·µò·µá_ ; ass to assÀ¢·µò·µá)
open PiStructure pistr
open UniverseStructure univstr
open import cwfs.Telescopes cwfstr
open Œ†‚Çú‚Çë‚Çó pistr
open TelIndexedTypes univstr

\end{code}

The type of the data of a diagram up to level (b-1), together with
the matching object functor, further refined over shapes.

\begin{code}

record DiagramData (b : ‚Ñï) : Type (‚Ñì‚Çí ‚à™ ‚Ñì‚Çò ‚à™ ‚Ñì‚Çò·¥µ)
  where
  field
    ùîª : Con
    M·µí : (sh@(shape i h t s) : Shape) (u : h < b) (w : sh ‚â§‚Çõ total-shape b) ‚Üí Tel ùîª

  M : (sh@(shape i h t s) : Shape) (u : h < b) (w : sh ‚â§‚Çõ total-shape b) ‚Üí Con
  M sh u w = close (M·µí sh u w)

  field
    M‚Éó :
      (sh@(shape i h t s) : Shape) (u : h < b) (w : sh ‚â§‚Çõ total-shape b)
      ‚Üí {j : ‚Ñï} (f : hom i j)
      ‚Üí let rf = count-factors i h t s f in
        (rfs : is-shape j h rf)
      ‚Üí let rfsh = shape j h rf rfs in
        (rfw : rfsh ‚â§‚Çõ total-shape b)
      ‚Üí Sub (M sh u w) (M rfsh u rfw)

    -- M·µí‚Çú‚Çí‚Çú : Tel ùîª

open DiagramData



diag-data : ‚àÄ b ‚Üí DiagramData b
M·µí‚Çú‚Çí‚Çú : ‚àÄ b ‚Üí Tel (ùîª (diag-data b))

diag-data O = record
  { ùîª = ‚óÜ
  ; M·µí = Œª{ sh () w }
  ; M‚Éó = Œª{ sh () w f rfs rfw }
  }
diag-data (1+ b) = record
  { ùîª = ùîª[1+b]
  ; M·µí = shape-ind M·µí-type (Œª{ (shape i h t s) ‚Üí M·µí-rec i h t s })
  ; M‚Éó = {!!}
  }
  where
  ùîª[1+b] = ùîª (diag-data b) ‚à∑ Œ†‚Çú‚Çë‚Çó (M·µí‚Çú‚Çí‚Çú b) U

  M·µí-type : Shape ‚Üí Type _
  M·µí-type sh@(shape i h t s) =
    (u : h < 1+ b) (w : sh ‚â§‚Çõ total-shape (1+ b)) ‚Üí Tel ùîª[1+b]

  M·µí-rec :
    ‚àÄ i h t s
    ‚Üí let sh = shape i h t s in
      (rec : ‚àÄ ssh ‚Üí ssh <‚Çõ sh ‚Üí M·µí-type ssh)
    ‚Üí M·µí-type sh
  M·µí-rec i O O s rec u w = ‚Ä¢
  M·µí-rec i (1+ h) O s rec u w =
    rec (full-shape i h) (on-‚Ñé ltS) (S<-< u) {!!}
  M·µí-rec i h (1+ t) s rec u w =
    M·µí-rec i h t (prev-is-shape s) {!!} u {!!} ‚Ä£ {!!}
    -- rec (prev-shape s) (on-ùë° ltS) u {!!} ‚Ä£ {!!}

  -- M·µí-rec : ‚àÄ sh ‚Üí (rec : ‚àÄ ssh ‚Üí ssh <‚Çõ sh ‚Üí M·µí-type ssh) ‚Üí M·µí-type sh
  -- M·µí-rec (shape i O O s) rec u w = ‚Ä¢
  -- M·µí-rec (shape i (1+ h) O s) rec u w =
  --   rec (full-shape i h) (on-‚Ñé ltS) (S<-< u) {!!}
  -- M·µí-rec (shape i h (1+ t) s) rec u w =
  --   rec (prev-shape s) (on-ùë° ltS) u {!!} ‚Ä£ {!!}

M·µí‚Çú‚Çí‚Çú O = ‚Ä¢
M·µí‚Çú‚Çí‚Çú (1+ b) = {!!}

\end{code}
