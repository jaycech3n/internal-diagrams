{-# OPTIONS --without-K #-}

open import reedy.IndexSemicategories

module reedy.LinearSieves {ℓₘ} (I : SuitableSemicategory ℓₘ) where

open SuitableSemicategory I

open import categories.DSM (SuitableSemicategory.wildsemicatstr I)

{- Shapes -}

record is-shape (i h t : ℕ) : Type₀ where
  constructor shape-conds
  field
    hcond : h ≤ i
    tcond : t ≤ hom-size i h

open is-shape

shapeₕ↓ : ∀ {i h} → is-shape i (1+ h) O → is-shape i h (hom-size i h)
shapeₕ↓ iS = shape-conds (≤-trans lteS (hcond iS)) lteE

shapeₜ↓ : ∀ {i h t} → is-shape i h (1+ t) → is-shape i h t
shapeₜ↓ iS = shape-conds (hcond iS) (≤-trans lteS (tcond iS))

full-shape : ∀ i → is-shape (1+ i) i (hom-size (1+ i) i)
full-shape i = shape-conds lteS lteE

-- Shape equivalence: generated by (i, h, t) ~ (i, h + 1, 0)

infix 90 _~[_]_ _~⋆⟨_⟩[_]_

_~[_]_ : ((h₁ , t₁) : ℕ × ℕ) (i : ℕ) ((h₂ , t₂) : ℕ × ℕ)
  → ⦃ is-shape i h₁ t₁ ⦄ → ⦃ is-shape i h₂ t₂ ⦄ → Type₀
(h₁ , t₁) ~[ i ] (h₂ , t₂) = (t₁ == hom-size i h₁) × (h₂ == 1+ h₁) × (t₂ == O)

_~⋆⟨_⟩[_]_ : ((h₁ , t₁) : ℕ × ℕ) (n : ℕ) (i : ℕ) ((h₂ , t₂) : ℕ × ℕ)
  → ⦃ is-shape i h₁ t₁ ⦄ → ⦃ is-shape i h₂ t₂ ⦄ → Type₀
(h₁ , t₁) ~⋆⟨ O ⟩[ i ] (h₂ , t₂) = (h₁ , t₁) == (h₂ , t₂)
_~⋆⟨_⟩[_]_ (h₁ , t₁) (1+ n) i (h₂ , t₂) ⦃ iS₁ ⦄ ⦃ iS₂ ⦄ =
  Σ[ h ː ℕ ] Σ[ t ː ℕ ] Σ[ iS ː is-shape i h t ]
    _~[_]_ (h₁ , t₁) i (h , t) ⦃ iS₁ ⦄ ⦃ iS ⦄ ×
    _~⋆⟨_⟩[_]_ (h , t) n i (h₂ , t₂) ⦃ iS ⦄ ⦃ iS₂ ⦄

-- Shape restriction

-- [ i , h , t ] iS · f is a representative of the equivalence class of shapes
-- that describe the (i, h, t)-sieve restricted along f (no uniform choice of which).
-- The definition is a bit finicky, and it's currently a bit unclear what the best
-- formulation is.

module _ (i : ℕ) where
  shape-· : (h t : ℕ) (iS : is-shape i h t) {m : ℕ} (f : hom i m) → ℕ × ℕ
  shape-· h (1+ t) iS {m} f =
    if h <? m then (λ h<m →
      if O <? hom-size m h then (λ O<hom-size
        → h , #-factors-of-≤[ t-Fin ]-through f O<hom-size)
      else λ _
        → h , O)
    else λ _
      → m , O
    where
      t-Fin : Fin (hom-size i h)
      t-Fin = t , <-≤-< ltS (tcond iS)
  shape-· (1+ h) O iS {m} f = shape-· h (hom-size i h) (shapeₕ↓ iS) f
  shape-· O O _ {m} f = O , O

[_,_,_]_· : (i h t : ℕ) (iS : is-shape i h t) {m : ℕ} (f : hom i m) → ℕ × ℕ × ℕ
[_,_,_]_· i h t iS {m} f = m , shape-· i h t iS f


{- (i, h, t)-admissibility -}

is-_-admissible : ((i , h , t) : ℕ × ℕ × ℕ) {m : ℕ} (f : hom i m) → Type₀
is-(i , h , t)-admissible f =
  (cod f < h)
  ⊔ ((cod f == h) × (to-ℕ (idx-of f) < t))

is-_-admissible? :
  ((i , h , t) : ℕ × ℕ × ℕ) {m : ℕ} (f : hom i m)
  → Dec (is-( i , h , t )-admissible f)
is- _ -admissible? f = ⊔-dec (_ <? _) (×-dec (_ ≟-ℕ _) (_ <? _))

admissibleₕ↑ : ∀ i h {m} (f : hom i m)
  → is-( i , h , hom-size i h )-admissible f
  → is-( i , 1+ h , O )-admissible f
admissibleₕ↑ i h f (inl u) = inl (ltSR u)
admissibleₕ↑ i h f (inr (idp , _)) = inl ltS

admissibleₕ↓ : ∀ i h {m} (f : hom i m)
  → is-( i , 1+ h , O )-admissible f
  → is-( i , h , hom-size i h )-admissible f
admissibleₕ↓ i h {m} f (inl u) with ℕ-trichotomy' m h
... | inr h<m = ⊥-rec (no-between u (<-ap-S h<m))
... | inl (inl idp) = inr (idp , idx<hom-size f)
... | inl (inr m<h) = inl m<h

admissible-h-iff : ∀ i h {m} (f : hom i m)
  → to-Bool (is-(i , h , hom-size i h)-admissible? f)
    == to-Bool (is-(i , 1+ h , O)-admissible? f)
admissible-h-iff i h f =
  ap-to-Bool
    (is-(i , h , hom-size i h)-admissible? f)
    (is-(i , 1+ h , O)-admissible? f)
    (admissibleₕ↑ i h f)
    (admissibleₕ↓ i h f)

-- Important

·-admissible :
  (i h t : ℕ) (iS : is-shape i h t)
  {m : ℕ} (f : hom i m) (g : hom m h)
  → is-(i , h , t)-admissible (g ◦ f)
  → is- [ i , h , t ] iS · f -admissible g
·-admissible i O O iS f g (inl ())
·-admissible i O O iS f g (inr ())
·-admissible i (1+ h) O iS f g (inl u) = ⊥-rec $ ¬< u
·-admissible i .(1+ _) (1+ t) iS f g (inl (ltSR u)) = ⊥-rec $ S≮ u
·-admissible i h (1+ t) iS {m} f g (inr (p , u))
 with h <? m
... | inr ¬h<m = ⊥-rec $ ¬h<m (hom-inverse m h g)
... | inl  h<m
     with O <? hom-size m h
...     | inl v = inr (p , {!!})
{-
  g ◦ f ≼ [t] -- idx-of (g ◦ f) < 1+ t
  ⊢ idx-of (g: m → h) < cumul-#-factors-of ([t]: i → h) through (f: i → m) -- (from [0])

  Because:
    If idx-of g ≥ cumul-#-factors-of [t] through f,
    then idx-of (g ◦ f) ≥ 1+ t.
-}
...     | inr ¬v = ⊥-rec $ ¬v $ hom[ m , h ]-inhab g


{- Sieves -}

record LinearSieve (i : ℕ) : Type ℓₘ where
  constructor S[_,_]
  field
    height width : ℕ
    ⦃ shape-cond ⦄ : is-shape i height width
    char : DSM i
    char-∋-cond :
      ∀ {m} (f : hom i m)
      → (char ∋ f) == to-Bool (is-(i , height , width)-admissible? f)

open LinearSieve

linear-sieve : (i h t : ℕ) → is-shape i h t → LinearSieve i
linear-sieve i h t iS =
  S[ h , t ] ⦃ iS ⦄
    (λ _ f → to-Bool (is-(i , h , t )-admissible? f))
    (λ _ → idp)

{-
_~⋆⟨_⟩_ : ∀ {i} → LinearSieve i → (n : ℕ) → LinearSieve i → Type₀
_~⋆⟨_⟩_ {i} s n s' = (height s , width s) ~⋆⟨ n ⟩[ i ] (height s' , width s')

~⋆-equal-char : ∀ {n} {i} (s s' : LinearSieve i) → s ~⋆⟨ n ⟩ s' → char s == char s'
~⋆-equal-char {O} (S[ _ , _ ] χ χ-∋-cond) (S[ _ , _ ] χ' χ'-∋-cond) idp
  = DSM= (λ m f → χ-∋-cond f ∙ ! (χ'-∋-cond f))
~⋆-equal-char {1+ n} {i}
  s@(S[ h , .(hom-size i h) ] χ χ-∋-cond)
  s'@(S[ h' , t' ] χ' χ'-∋-cond)
  (.(1+ h) , .O , iS , (idp , idp , idp) , ~⋆) =
    DSM= (λ m f → χ-∋-cond f ∙ admissible-h-iff i h f)
    ∙ ~⋆-equal-char (linear-sieve i (1+ h) O iS) s' ~⋆
-}
