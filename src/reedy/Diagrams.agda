{-# OPTIONS --without-K --rewriting --termination-depth=2 #-}

{--- IMPORTANT! This version switches off termination checking temporarily. ---}

open import reedy.SimpleSemicategories
open import cwfs.CwFs
open import cwfs.Pi
open import cwfs.Universe
open import hott.WellFounded

module reedy.Diagrams {‚Ñì‚Çò·¥µ ‚Ñì‚Çí ‚Ñì‚Çò}
  (I : SimpleSemicategory ‚Ñì‚Çò·¥µ)
  (I-strictly-oriented : is-strictly-oriented I)
  {C : WildCategory ‚Ñì‚Çí ‚Ñì‚Çò}
  (cwfstr : CwFStructure C)
  (pistr : PiStructure cwfstr)
  (univstr : UniverseStructure cwfstr)
  where

open SimpleSemicategory I
open import reedy.Cosieves I
open Cosieves-IsStrictlyOriented I-strictly-oriented

open CwFStructure cwfstr renaming (_‚ó¶_ to _‚ó¶À¢·µò·µá_)
open PiStructure pistr
open UniverseStructure univstr
open import cwfs.Telescopes cwfstr
open Œ†‚Çú‚Çë‚Çó pistr
open TelIndexedTypes univstr


Shape = Œ£[ (i , h , t) Àê ‚Ñï √ó ‚Ñï √ó ‚Ñï ] shape i h t


_<‚Çõ_ : Shape ‚Üí Shape ‚Üí Type‚ÇÄ
((i‚ÇÅ , h‚ÇÅ , t‚ÇÅ) , shape‚ÇÅ) <‚Çõ ((i‚ÇÇ , h‚ÇÇ , t‚ÇÇ) , shape‚ÇÇ) = {!(i‚ÇÅ < i‚ÇÇ) OR ... (lexicographic order)!}

iswf<‚Çõ : is-wf _<‚Çõ_
iswf<‚Çõ = {!!}

record ind-data (s : Shape) : Type (‚Ñì‚Çò·¥µ ‚à™ ‚Ñì‚Çí ‚à™ ‚Ñì‚Çò) where
  field
    SCT : Con
    M·µí  : ‚àÄ {s' : Shape} ‚Üí ((s' <‚Çõ s) ‚äî (s' == s)) ‚Üí Tel SCT
    M‚Éó  : ‚àÄ {s' : Shape} ‚Üí ((s' <‚Çõ s) ‚äî (s' == s))
            ‚Üí {k : ‚Ñï} ‚Üí (f : hom (fst (fst s')) k) ‚Üí Sub (close $ M·µí (inr idp)) (close $ M·µí {s' = {!s' ¬∑ f!}} {!inl $ lemma : s' ¬∑ f <‚Çõ s!})
    Œ±   : ‚àÄ {s' : Shape} ‚Üí (p : ((s' <‚Çõ s) ‚äî (s' == s)))
            ‚Üí {k : ‚Ñï} ‚Üí (f : hom (fst (fst s')) k)
            ‚Üí {l : ‚Ñï} ‚Üí (g : hom k l)
            ‚Üí (M‚Éó {s' = {!s' ‚ó¶ f!}} {!lemma!} g) ‚ó¶À¢·µò·µá (M‚Éó {s' = s'} p f) == (M‚Éó {s' = s'} p (g ‚ó¶ f))
    Œ≥   : {!!}



{-
ùîª‚Çú : ‚Ñï ‚Üí Con
M·µí‚Çú = (i h t : ‚Ñï) ‚Üí (ùîª : ùîª‚Çú) ‚Üí shape i h t ‚Üí Tel (ùîª (1+ h))

-- Convenience definitions ====

-- M‚Çú = (i h t : ‚Ñï) ‚Üí shape i h t ‚Üí Con
-- M i h t s = close (M·µí i h t s)

M·µí‚Çú‚Çí‚Çú : (i : ‚Ñï) ‚Üí Tel (ùîª i)
M·µí‚Çú‚Çí‚Çú O = ‚Ä¢
M·µí‚Çú‚Çí‚Çú (1+ i) = M·µí (1+ i) i (hom-size (1+ i) i) (total-shape-1+ i)

ùî∏ : (i : ‚Ñï) ‚Üí Ty (ùîª i)
ùî∏ i = Œ†‚Çú‚Çë‚Çó (M·µí‚Çú‚Çí‚Çú i) U

A : (i : ‚Ñï) ‚Üí Ty (ùîª i ‚à∑ ùî∏ i ++‚Çú‚Çë‚Çó M·µí‚Çú‚Çí‚Çú i [ œÄ (ùî∏ i) ]‚Çú‚Çë‚Çó)
A i = generic[ M·µí‚Çú‚Çí‚Çú i ]type

-- End convenience definitions ====

test : _
test = {!Œ£[ x ‚à∂ ‚Ñï ] ?!}


ùîª O = ‚óÜ
ùîª (1+ i) = ùîª i ‚à∑ ùî∏ i

M‚Éó :
  ‚àÄ i h t s {j} (f : hom i j)
  ‚Üí let cf = count-factors i h t s f
        sh = count-factors-gives-shape i h t s f
    in Sub (ùîª h ‚à∑ ùî∏ h ++‚Çú‚Çë‚Çó M·µí i h t s) (ùîª h ‚à∑ ùî∏ h ++‚Çú‚Çë‚Çó M·µí j h cf sh)



M‚Éó = {!!}

{-
{-# TERMINATING #-}
M·µí i h (1+ t) s =
  M·µí i h t shp ‚Ä£ A h [ {!!} ‚ó¶À¢·µò·µá M‚Éó i h t shp (#[ t ] i h u) ]
  where
  shp = prev-shape s
  u : t < hom-size i h
  u = S‚â§-< s
M·µí i (1+ h) O s = M·µí i h full shp [ œÄ (ùî∏ (1+ h)) ]‚Çú‚Çë‚Çó
  where
  full = hom-size i h
  shp = full-shape i h
M·µí i O O s = ‚Ä¢

M‚Éó i h (1+ t) s f = {!!}
M‚Éó i (1+ h) O s f = {!M‚Éó i h full shp !}
  where
  full = hom-size i h
  shp = full-shape i h
M‚Éó i O O s f = id
-}
-}
