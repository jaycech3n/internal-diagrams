{-# OPTIONS --without-K --rewriting --termination-depth=2 #-}

{--- IMPORTANT! This version switches off termination checking temporarily. ---}

open import reedy.SimpleSemicategories
open import cwfs.CwFs
open import cwfs.Pi
open import cwfs.Universe

module reedy.Diagrams {‚Ñì‚Çò·¥µ ‚Ñì‚Çí ‚Ñì‚Çò}
  (I : SimpleSemicategory ‚Ñì‚Çò·¥µ)
  (I-strictly-oriented : is-strictly-oriented I)
  {C : WildCategory ‚Ñì‚Çí ‚Ñì‚Çò}
  (cwfstr : CwFStructure C)
  (pistr : PiStructure cwfstr)
  (univstr : UniverseStructure cwfstr)
  where

open SimpleSemicategory I
open import reedy.Cosieves I
open Cosieves-IsStrictlyOriented I-strictly-oriented

open CwFStructure cwfstr renaming (_‚ó¶_ to _‚ó¶À¢·µò·µá_)
open PiStructure pistr
open UniverseStructure univstr
open import cwfs.Telescopes cwfstr
open Œ†‚Çú‚Çë‚Çó pistr
open TelIndexedTypes univstr


-- Need this to define the (i, h, t+1) case of the construction.
-- Does this need to be simultaneous with the diagram?
-- case-on-‚à£ : ‚àÄ {‚Ñì}
--   ‚Üí (P : (i h t : ‚Ñï) (s : shape i h t) ‚Üí Type ‚Ñì)
--   ‚Üí (i h t : ‚Ñï) (s : shape i h t)
--   ‚Üí ‚àÄ {j} (f : hom i j)
--   ‚Üí {u : t < hom-size i h} (d : f ‚à£ #[ t ] i h u)
--   ‚Üí (c : f ‚à£ #[ t ] i h u ‚Üí ‚Ñï)
--   ‚Üí (w : ‚àÄ j h ‚Üí shape j h (c d))
--   ‚Üí Sub (P i h t s) (P j h (c d) (w (c d)))
-- case-on-‚à£ = ?


ùîª : ‚Ñï ‚Üí Con
M·µí : (i h t : ‚Ñï) ‚Üí shape i h t ‚Üí Tel (ùîª (1+ h))

-- Convenience definitions ====

M : (i h t : ‚Ñï) ‚Üí shape i h t ‚Üí Con
M i h t s = close (M·µí i h t s)

M·µí·µó·µí·µó : (i : ‚Ñï) ‚Üí Tel (ùîª i)
M·µí·µó·µí·µó O = ‚Ä¢
M·µí·µó·µí·µó (1+ i) = M·µí (1+ i) i (hom-size (1+ i) i) (total-shape-1+ i)

M·µí·∂†·µòÀ°À° : (i h : ‚Ñï) ‚Üí Tel (ùîª (1+ h))
M·µí·∂†·µòÀ°À° i h = M·µí i h full shp
  where
  full = hom-size i h
  shp = full-shape i h

ùî∏ : (i : ‚Ñï) ‚Üí Ty (ùîª i)
ùî∏ i = Œ†‚Çú‚Çë‚Çó (M·µí·µó·µí·µó i) U

A : (i : ‚Ñï) ‚Üí Ty (ùîª i ‚à∑ ùî∏ i ++‚Çú‚Çë‚Çó M·µí·µó·µí·µó i [ œÄ (ùî∏ i) ]‚Çú‚Çë‚Çó)
A i = generic[ M·µí·µó·µí·µó i ]type

M= : ‚àÄ i h {t} {s} {t'} {s'} ‚Üí t == t' ‚Üí M i h t s == M i h t' s'
M= i h {t} {s} {.t} {s'} idp = ap (M i h t) shape-path

-- End convenience definitions ====

ùîª O = ‚óÜ
ùîª (1+ i) = ùîª i ‚à∑ ùî∏ i

M‚Éó :
  ‚àÄ i h t s {j} (f : hom i j)
  ‚Üí let cf = count-factors i h t s f
        sh = count-factors-gives-shape i h t s f
    in Sub (M i h t s) (M j h cf sh)


-- Also use this equation
M=‚ÇÅ :
  ‚àÄ i h t (s : shape i h (1+ t))
  ‚Üí let prev = prev-shape s
        u = S‚â§-< s
        [t] = #[ t ] i h u
        cf = count-factors i h t prev [t]
        sh = count-factors-gives-shape i h t prev [t]
    in M h h cf sh == close (M·µí·µó·µí·µó h [ œÄ (ùî∏ h) ]‚Çú‚Çë‚Çó)


M‚Éó‚ó¶ :
  ‚àÄ i h t s {j} (f : hom i j) {k} (g : hom j k)
  ‚Üí let cf = count-factors i h t s f
        sh = count-factors-gives-shape i h t s f -- or abstract over this too?
        p  = count-factors-comp i h t s f g -- and this too?
    in M‚Éó j h cf sh g ‚ó¶À¢·µò·µá M‚Éó i h t s f == idd (M= k h p) ‚ó¶À¢·µò·µá M‚Éó i h t s (g ‚ó¶ f)


{-# TERMINATING #-}
M·µí i h (1+ t) s =
  M·µí i h t shp ‚Ä£ A h [ idd eq ‚ó¶À¢·µò·µá M‚Éó i h t shp (#[ t ] i h u) ]
  where
  shp = prev-shape s
  u : t < hom-size i h
  u = S‚â§-< s

  c = count-factors i h t shp (#[ t ] i h u)
  cs = count-factors-gives-shape i h t shp (#[ t ] i h u)

  eq : M h h c cs == (ùîª (1+ h) ++‚Çú‚Çë‚Çó M·µí·µó·µí·µó h [ œÄ (ùî∏ h) ]‚Çú‚Çë‚Çó)
  eq = M=‚ÇÅ i h t s

M·µí i (1+ h) O s = M·µí·∂†·µòÀ°À° i h [ œÄ (ùî∏ (1+ h)) ]‚Çú‚Çë‚Çó
M·µí i O O s = ‚Ä¢

M=‚ÇÅ i O t s =
  M O O cf sh =‚ü® M= O O {s' = O‚â§ _} p ‚ü©
  M O O O (O‚â§ (hom-size O O)) =‚ü® idp ‚ü©
  close (M·µí·µó·µí·µó O [ œÄ (ùî∏ O) ]‚Çú‚Çë‚Çó) =‚àé
  where
  prev = prev-shape s
  u = S‚â§-< s
  [t] = #[ t ] i O u
  cf = count-factors i O t prev [t]
  sh = count-factors-gives-shape i O t prev [t]

  p : cf == O
  p = count-factors-top-level i O t prev [t]

M=‚ÇÅ i (1+ h) t s =
  M (1+ h) (1+ h) cf sh =‚ü® M= (1+ h) (1+ h) {s' = O‚â§ _} p ‚ü©
  M (1+ h) (1+ h) O (O‚â§ _) =‚ü® idp ‚ü©
  close (M·µí·µó·µí·µó (1+ h) [ œÄ (ùî∏ (1+ h)) ]‚Çú‚Çë‚Çó) =‚àé
  where
  prev = prev-shape s
  u = S‚â§-< s
  [t] = #[ t ] i (1+ h) u
  cf = count-factors i (1+ h) t prev [t]
  sh = count-factors-gives-shape i (1+ h) t prev [t]

  p : cf == O
  p = count-factors-top-level i (1+ h) t prev [t]


M‚Éó i h (1+ t) s {j} f
 with f ‚à£ #[ t ] i h (S‚â§-< s)
    | inspect (count-factors i h (1+ t) s) f
    | count-factors i h (1+ t) s f               -- c
    | inspect (count-factors i h (1+ t) s) f
    | count-factors-gives-shape i h (1+ t) s f   -- cs
    | M·µí j h (count-factors i h (1+ t) s f)
        (count-factors-gives-shape i h (1+ t) s f)
    | inspect (uncurry $ M·µí j h)
        (count-factors i h (1+ t) s f
        , count-factors-gives-shape i h (1+ t) s f)

... | inl (g , e)
    | have p -- : count-factors i h (1+ t) s f ==
             --   1+ (count-factors i h t (prev-shape s) f)
    | c @ .(count-factors i h (1+ t) s f) | have idp
    | cs
    | .(M·µí j h (count-factors i h (1+ t) s f) cs) | have idp
      -- Would we be able to pattern match on p if we paired up c and its
      -- inspected equality? More principled: worth manually writing auxiliary
      -- defs to do a proper hand-tailored with-abstraction.
    =
    (idd eq ‚ó¶À¢·µò·µá
      (idd {!!} ‚ó¶À¢·µò·µá M‚Éó i h t prev f ‚ó¶À¢·µò·µá œÄ (A h [ _ ]) ,, {!!})
    ) :> (Sub (M i h t prev ‚à∑ A h [ idd (M=‚ÇÅ i h t s) ‚ó¶À¢·µò·µá M‚Éóiht[t] ]) (M j h c cs))
    where
    prev = prev-shape s
    cf = count-factors i h t prev f

    sh : shape j h (1+ cf)
    sh = transp (shape j h) p cs

    eq : M j h (1+ cf) sh == M j h c cs
    eq = M= j h (! p)

    -- debugging
    u = S‚â§-< s
    M‚Éóiht[t] = M‚Éó i h t prev (#[ t ] i h u)
    ----

    M‚Éóihtf = M‚Éó i h t prev f

... | inr no
    | have p -- : count-factors i h (1+ t) s f ==
             --   count-factors i h t (prev-shape s) f
    | c @ .(count-factors i h (1+ t) s f) | have idp
    | cs
    | .(M·µí j h (count-factors i h (1+ t) s f) cs) | have idp
    =
    idd eq ‚ó¶À¢·µò·µá M‚Éó i h t prev f ‚ó¶À¢·µò·µá œÄ (A h [ _ ])
      -- Note (also record this on paper): on paper, don't have this coercion by
      -- (idd _), but in TT we need this because we don't have that
      -- count-factors (i, h, t+1) f reduces to count-factors (i, h, t) f
      -- definitionally. But maybe it can be made so, with more effort?
    where
    prev = prev-shape s
    cf = count-factors i h t prev f
    sh = count-factors-gives-shape i h t prev f

    eq : M j h cf sh == M j h c cs
    eq = M= j h (! p)

M‚Éó i (1+ h) O s {j} f =
  wkn-sub (M·µí·∂†·µòÀ°À° i h) (M·µí·∂†·µòÀ°À° j h)
    (idd eq ‚ó¶À¢·µò·µá M‚Éó i h full·µ¢ shp·µ¢ f)
    {!commutation lemma; another component of the definition!}
    (ùî∏ (1+ h))
  where
  full·µ¢ = hom-size i h
  shp·µ¢ = full-shape i h

  cf = count-factors i h full·µ¢ shp·µ¢ f
  sh = count-factors-gives-shape i h full·µ¢ shp·µ¢ f

  full‚±º = hom-size j h
  shp‚±º = full-shape j h

  eq : M j h cf sh == M j h full‚±º shp‚±º
  eq = M= j h (count-factors-full i h shp·µ¢ f)

M‚Éó i O O s f = id


M‚Éó‚ó¶ = {!!}
