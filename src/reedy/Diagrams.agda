{-# OPTIONS --without-K --rewriting --termination-depth=2 #-}

{--- IMPORTANT! This version switches off termination checking temporarily. ---}

open import reedy.SimpleSemicategories
open import cwfs.CwFs
open import cwfs.Pi
open import cwfs.Universe

module reedy.Diagrams {‚Ñì‚Çò·¥µ ‚Ñì‚Çí ‚Ñì‚Çò}
  (I : SimpleSemicategory ‚Ñì‚Çò·¥µ)
  (I-strictly-oriented : is-strictly-oriented I)
  {C : WildCategory ‚Ñì‚Çí ‚Ñì‚Çò}
  (cwfstr : CwFStructure C)
  (pistr : PiStructure cwfstr)
  (univstr : UniverseStructure cwfstr)
  where

open SimpleSemicategory I
open import reedy.Cosieves I
open Cosieves-IsStrictlyOriented I-strictly-oriented

open CwFStructure cwfstr renaming (_‚ó¶_ to _‚ó¶À¢·µò·µá_)
open PiStructure pistr
open UniverseStructure univstr
open import cwfs.Telescopes cwfstr
open Œ†‚Çú‚Çë‚Çó pistr
open TelIndexedTypes univstr


-- Need this to define the (i, h, t+1) case of the construction.
-- Does this need to be simultaneous with the diagram?
-- case-on-‚à£ : ‚àÄ {‚Ñì}
--   ‚Üí (P : (i h t : ‚Ñï) (s : shape i h t) ‚Üí Type ‚Ñì)
--   ‚Üí (i h t : ‚Ñï) (s : shape i h t)
--   ‚Üí ‚àÄ {j} (f : hom i j)
--   ‚Üí {u : t < hom-size i h} (d : f ‚à£ #[ t ] i h u)
--   ‚Üí (c : f ‚à£ #[ t ] i h u ‚Üí ‚Ñï)
--   ‚Üí (w : ‚àÄ j h ‚Üí shape j h (c d))
--   ‚Üí Sub (P i h t s) (P j h (c d) (w (c d)))
-- case-on-‚à£ = ?


ùîª : ‚Ñï ‚Üí Con
M·µí : (i h t : ‚Ñï) ‚Üí shape i h t ‚Üí Tel (ùîª (1+ h))

-- Convenience definitions ====

M : (i h t : ‚Ñï) ‚Üí shape i h t ‚Üí Con
M i h t s = close (M·µí i h t s)

M·µí·µó·µí·µó : (i : ‚Ñï) ‚Üí Tel (ùîª i)
M·µí·µó·µí·µó O = ‚Ä¢
M·µí·µó·µí·µó (1+ i) = M·µí (1+ i) i (hom-size (1+ i) i) (total-shape-1+ i)

M·µí·∂†·µòÀ°À° : (i h : ‚Ñï) ‚Üí Tel (ùîª (1+ h))
M·µí·∂†·µòÀ°À° i h = M·µí i h full shp
  where
  full = hom-size i h
  shp = full-shape i h

ùî∏ : (i : ‚Ñï) ‚Üí Ty (ùîª i)
ùî∏ i = Œ†‚Çú‚Çë‚Çó (M·µí·µó·µí·µó i) U

A : (i : ‚Ñï) ‚Üí Ty (ùîª i ‚à∑ ùî∏ i ++‚Çú‚Çë‚Çó M·µí·µó·µí·µó i [ œÄ (ùî∏ i) ]‚Çú‚Çë‚Çó)
A i = generic[ M·µí·µó·µí·µó i ]type

-- End convenience definitions ====

ùîª O = ‚óÜ
ùîª (1+ i) = ùîª i ‚à∑ ùî∏ i

M‚Éó :
  ‚àÄ i h t s {j} (f : hom i j)
  ‚Üí let cf = count-factors i h t s f
        sh = count-factors-gives-shape i h t s f
    in Sub (ùîª h ‚à∑ ùî∏ h ++‚Çú‚Çë‚Çó M·µí i h t s) (ùîª h ‚à∑ ùî∏ h ++‚Çú‚Çë‚Çó M·µí j h cf sh)

{-# TERMINATING #-}
M·µí i h (1+ t) s =
  M·µí i h t shp ‚Ä£ A h [ {!coercion between equals!} ‚ó¶À¢·µò·µá M‚Éó i h t shp (#[ t ] i h u) ]
  where
  shp = prev-shape s
  u : t < hom-size i h
  u = S‚â§-< s
M·µí i (1+ h) O s = M·µí·∂†·µòÀ°À° i h [ œÄ (ùî∏ (1+ h)) ]‚Çú‚Çë‚Çó
M·µí i O O s = ‚Ä¢

M‚Éó i h (1+ t) s {j} f
 with f ‚à£ #[ t ] i h (S‚â§-< s)
    | inspect (count-factors i h (1+ t) s) f
    | count-factors i h (1+ t) s f
    | inspect (count-factors i h (1+ t) s) f
    | count-factors-gives-shape i h (1+ t) s f
    | M·µí j h (count-factors i h (1+ t) s f) (count-factors-gives-shape i h (1+ t) s f)
    | inspect (uncurry $ M·µí j h) (count-factors i h (1+ t) s f , count-factors-gives-shape i h (1+ t) s f)
... | inl x | eq | c | eq' | cs | M·µíjh | eqq = {!!}
... | inr no | have p | c | have q | cs | M·µíjh | have idp = {!
  -- ! q ‚àô p
  M‚Éó i h t prev f!}
    ‚ó¶À¢·µò·µá œÄ (A h [ _ ])
  where
  prev = prev-shape s


--   with
--     count-factors i h (1+ t) s f
--   | inspect (count-factors i h (1+ t) s) f
--   | f ‚à£ #[ t ] i h (S‚â§-< s)
--   | inspect (f ‚à£_) (#[ t ] i h (S‚â§-< s))
--   | count-factors-gives-shape i h (1+ t) s f
--   | M·µí j h (count-factors i h (1+ t) s f) (count-factors-gives-shape i h (1+ t) s f)
--   | inspect (uncurry $ M·µí j h) (count-factors i h (1+ t) s f , count-factors-gives-shape i h (1+ t) s f)
-- ... | cf | eqcf | inl (g , p) | eq | cs | M·µíjhc | eqM = {!!}
-- ... | cf | have q | inr no | have p | cs | M·µíjhc | eqM = {!q :> (count-factors i h (1+ t) s f == cf)!}
--   -- {!--M‚Éó i h t prev f
--   -- p :> (count-factors i h (1+ t) s f == c)
--   -- -- Want : c == count-factors i h t s f!} ‚ó¶À¢·µò·µá œÄ (A h [ _ ])
--   where
--   prev = prev-shape s
--   P = Œª ‚óª ‚Üí Sub
--       (ùîª h ‚à∑ Œ†‚Çú‚Çë‚Çó (M·µí·µó·µí·µó h) U ++‚Çú‚Çë‚Çó M·µí i h t (‚â§-trans (inr ltS) s))
--       (ùîª h ‚à∑ Œ†‚Çú‚Çë‚Çó (M·µí·µó·µí·µó h) U ++‚Çú‚Çë‚Çó uncurry (M·µí j h) ‚óª)


M‚Éó i (1+ h) O s {j} f =
  wkn-sub (M·µí·∂†·µòÀ°À° i h) (M·µí·∂†·µòÀ°À° j h) ({!coercion between equals!} ‚ó¶À¢·µò·µá M‚Éó i h full shp f) {!commutation lemma; another component of the definition!} (ùî∏ (1+ h))
  where
  full = hom-size i h
  shp = full-shape i h
M‚Éó i O O s f = id
